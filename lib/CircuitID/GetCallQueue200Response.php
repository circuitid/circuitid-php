<?php
/**
 * GetCallQueue200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.20
 * Contact: support@circuitid.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\CircuitID;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetCallQueue200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetCallQueue200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getCallQueue_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'strategy' => 'string',
        'announcePosition' => 'int',
        'moh' => 'string',
        'callerResumeTimeout' => 'int',
        'maxWaitTime' => 'int',
        'maxWaitTimeNoAgent' => 'int',
        'maxNoAnswer' => 'int',
        'noAnswerDelayTimeout' => 'int',
        'rejectTimeout' => 'int',
        'busyTimeout' => 'int',
        'wrapUpTimeout' => 'int',
        'timeBasedScore' => 'string',
        'tierRulesApply' => 'bool',
        'tierRuleNoAgentNoWait' => 'bool',
        'tierRuleWaitSecond' => 'int',
        'tierRuleWaitMultiplyLevel' => 'bool',
        'abandonedResumeAllowed' => 'bool',
        'discardAbandonedAfter' => 'int',
        'maxWaitTimeNoAgentTimeReached' => 'int',
        'id' => 'string',
        'createdByUserId' => 'string',
        'updatedByUserId' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'strategy' => null,
        'announcePosition' => 'int32',
        'moh' => null,
        'callerResumeTimeout' => 'int32',
        'maxWaitTime' => 'int32',
        'maxWaitTimeNoAgent' => 'int32',
        'maxNoAnswer' => 'int32',
        'noAnswerDelayTimeout' => 'int32',
        'rejectTimeout' => 'int32',
        'busyTimeout' => 'int32',
        'wrapUpTimeout' => 'int32',
        'timeBasedScore' => null,
        'tierRulesApply' => null,
        'tierRuleNoAgentNoWait' => null,
        'tierRuleWaitSecond' => 'int32',
        'tierRuleWaitMultiplyLevel' => null,
        'abandonedResumeAllowed' => null,
        'discardAbandonedAfter' => 'int32',
        'maxWaitTimeNoAgentTimeReached' => 'int32',
        'id' => null,
        'createdByUserId' => null,
        'updatedByUserId' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'strategy' => false,
		'announcePosition' => false,
		'moh' => false,
		'callerResumeTimeout' => false,
		'maxWaitTime' => false,
		'maxWaitTimeNoAgent' => false,
		'maxNoAnswer' => false,
		'noAnswerDelayTimeout' => false,
		'rejectTimeout' => false,
		'busyTimeout' => false,
		'wrapUpTimeout' => false,
		'timeBasedScore' => false,
		'tierRulesApply' => false,
		'tierRuleNoAgentNoWait' => false,
		'tierRuleWaitSecond' => false,
		'tierRuleWaitMultiplyLevel' => false,
		'abandonedResumeAllowed' => false,
		'discardAbandonedAfter' => false,
		'maxWaitTimeNoAgentTimeReached' => false,
		'id' => false,
		'createdByUserId' => false,
		'updatedByUserId' => false,
		'createdAt' => false,
		'updatedAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'strategy' => 'strategy',
        'announcePosition' => 'announcePosition',
        'moh' => 'moh',
        'callerResumeTimeout' => 'callerResumeTimeout',
        'maxWaitTime' => 'maxWaitTime',
        'maxWaitTimeNoAgent' => 'maxWaitTimeNoAgent',
        'maxNoAnswer' => 'maxNoAnswer',
        'noAnswerDelayTimeout' => 'noAnswerDelayTimeout',
        'rejectTimeout' => 'rejectTimeout',
        'busyTimeout' => 'busyTimeout',
        'wrapUpTimeout' => 'wrapUpTimeout',
        'timeBasedScore' => 'timeBasedScore',
        'tierRulesApply' => 'tierRulesApply',
        'tierRuleNoAgentNoWait' => 'tierRuleNoAgentNoWait',
        'tierRuleWaitSecond' => 'tierRuleWaitSecond',
        'tierRuleWaitMultiplyLevel' => 'tierRuleWaitMultiplyLevel',
        'abandonedResumeAllowed' => 'abandonedResumeAllowed',
        'discardAbandonedAfter' => 'discardAbandonedAfter',
        'maxWaitTimeNoAgentTimeReached' => 'maxWaitTimeNoAgentTimeReached',
        'id' => '__id',
        'createdByUserId' => 'createdByUserId',
        'updatedByUserId' => 'updatedByUserId',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'strategy' => 'setStrategy',
        'announcePosition' => 'setAnnouncePosition',
        'moh' => 'setMoh',
        'callerResumeTimeout' => 'setCallerResumeTimeout',
        'maxWaitTime' => 'setMaxWaitTime',
        'maxWaitTimeNoAgent' => 'setMaxWaitTimeNoAgent',
        'maxNoAnswer' => 'setMaxNoAnswer',
        'noAnswerDelayTimeout' => 'setNoAnswerDelayTimeout',
        'rejectTimeout' => 'setRejectTimeout',
        'busyTimeout' => 'setBusyTimeout',
        'wrapUpTimeout' => 'setWrapUpTimeout',
        'timeBasedScore' => 'setTimeBasedScore',
        'tierRulesApply' => 'setTierRulesApply',
        'tierRuleNoAgentNoWait' => 'setTierRuleNoAgentNoWait',
        'tierRuleWaitSecond' => 'setTierRuleWaitSecond',
        'tierRuleWaitMultiplyLevel' => 'setTierRuleWaitMultiplyLevel',
        'abandonedResumeAllowed' => 'setAbandonedResumeAllowed',
        'discardAbandonedAfter' => 'setDiscardAbandonedAfter',
        'maxWaitTimeNoAgentTimeReached' => 'setMaxWaitTimeNoAgentTimeReached',
        'id' => 'setId',
        'createdByUserId' => 'setCreatedByUserId',
        'updatedByUserId' => 'setUpdatedByUserId',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'strategy' => 'getStrategy',
        'announcePosition' => 'getAnnouncePosition',
        'moh' => 'getMoh',
        'callerResumeTimeout' => 'getCallerResumeTimeout',
        'maxWaitTime' => 'getMaxWaitTime',
        'maxWaitTimeNoAgent' => 'getMaxWaitTimeNoAgent',
        'maxNoAnswer' => 'getMaxNoAnswer',
        'noAnswerDelayTimeout' => 'getNoAnswerDelayTimeout',
        'rejectTimeout' => 'getRejectTimeout',
        'busyTimeout' => 'getBusyTimeout',
        'wrapUpTimeout' => 'getWrapUpTimeout',
        'timeBasedScore' => 'getTimeBasedScore',
        'tierRulesApply' => 'getTierRulesApply',
        'tierRuleNoAgentNoWait' => 'getTierRuleNoAgentNoWait',
        'tierRuleWaitSecond' => 'getTierRuleWaitSecond',
        'tierRuleWaitMultiplyLevel' => 'getTierRuleWaitMultiplyLevel',
        'abandonedResumeAllowed' => 'getAbandonedResumeAllowed',
        'discardAbandonedAfter' => 'getDiscardAbandonedAfter',
        'maxWaitTimeNoAgentTimeReached' => 'getMaxWaitTimeNoAgentTimeReached',
        'id' => 'getId',
        'createdByUserId' => 'getCreatedByUserId',
        'updatedByUserId' => 'getUpdatedByUserId',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STRATEGY_RING_ALL = 'ring-all';
    public const STRATEGY_LONGEST_IDLE_AGENT = 'longest-idle-agent';
    public const STRATEGY_ROUND_ROBIN = 'round-robin';
    public const STRATEGY_TOP_DOWN = 'top-down';
    public const STRATEGY_AGENT_WITH_LEAST_TALK_TIME = 'agent-with-least-talk-time';
    public const STRATEGY_AGENT_WITH_FEWEST_CALLS = 'agent-with-fewest-calls';
    public const STRATEGY_SEQUENTIALLY_BY_AGENT_ORDER = 'sequentially-by-agent-order';
    public const STRATEGY_RANDOM = 'random';
    public const TIME_BASED_SCORE_QUEUE = 'queue';
    public const TIME_BASED_SCORE_SYSTEM = 'system';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrategyAllowableValues()
    {
        return [
            self::STRATEGY_RING_ALL,
            self::STRATEGY_LONGEST_IDLE_AGENT,
            self::STRATEGY_ROUND_ROBIN,
            self::STRATEGY_TOP_DOWN,
            self::STRATEGY_AGENT_WITH_LEAST_TALK_TIME,
            self::STRATEGY_AGENT_WITH_FEWEST_CALLS,
            self::STRATEGY_SEQUENTIALLY_BY_AGENT_ORDER,
            self::STRATEGY_RANDOM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimeBasedScoreAllowableValues()
    {
        return [
            self::TIME_BASED_SCORE_QUEUE,
            self::TIME_BASED_SCORE_SYSTEM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('strategy', $data ?? [], null);
        $this->setIfExists('announcePosition', $data ?? [], null);
        $this->setIfExists('moh', $data ?? [], 'deafult');
        $this->setIfExists('callerResumeTimeout', $data ?? [], 3600);
        $this->setIfExists('maxWaitTime', $data ?? [], 300);
        $this->setIfExists('maxWaitTimeNoAgent', $data ?? [], 300);
        $this->setIfExists('maxNoAnswer', $data ?? [], 1000000);
        $this->setIfExists('noAnswerDelayTimeout', $data ?? [], 60);
        $this->setIfExists('rejectTimeout', $data ?? [], 60);
        $this->setIfExists('busyTimeout', $data ?? [], 60);
        $this->setIfExists('wrapUpTimeout', $data ?? [], 10);
        $this->setIfExists('timeBasedScore', $data ?? [], 'queue');
        $this->setIfExists('tierRulesApply', $data ?? [], false);
        $this->setIfExists('tierRuleNoAgentNoWait', $data ?? [], true);
        $this->setIfExists('tierRuleWaitSecond', $data ?? [], 300);
        $this->setIfExists('tierRuleWaitMultiplyLevel', $data ?? [], true);
        $this->setIfExists('abandonedResumeAllowed', $data ?? [], true);
        $this->setIfExists('discardAbandonedAfter', $data ?? [], 14400);
        $this->setIfExists('maxWaitTimeNoAgentTimeReached', $data ?? [], 5);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('createdByUserId', $data ?? [], null);
        $this->setIfExists('updatedByUserId', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 45)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 45.";
        }

        if ($this->container['strategy'] === null) {
            $invalidProperties[] = "'strategy' can't be null";
        }
        $allowedValues = $this->getStrategyAllowableValues();
        if (!is_null($this->container['strategy']) && !in_array($this->container['strategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strategy', must be one of '%s'",
                $this->container['strategy'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['moh'] === null) {
            $invalidProperties[] = "'moh' can't be null";
        }
        if ((mb_strlen($this->container['moh']) > 255)) {
            $invalidProperties[] = "invalid value for 'moh', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['callerResumeTimeout'] === null) {
            $invalidProperties[] = "'callerResumeTimeout' can't be null";
        }
        if ($this->container['maxWaitTime'] === null) {
            $invalidProperties[] = "'maxWaitTime' can't be null";
        }
        if ($this->container['maxWaitTimeNoAgent'] === null) {
            $invalidProperties[] = "'maxWaitTimeNoAgent' can't be null";
        }
        if ($this->container['maxNoAnswer'] === null) {
            $invalidProperties[] = "'maxNoAnswer' can't be null";
        }
        if ($this->container['timeBasedScore'] === null) {
            $invalidProperties[] = "'timeBasedScore' can't be null";
        }
        $allowedValues = $this->getTimeBasedScoreAllowableValues();
        if (!is_null($this->container['timeBasedScore']) && !in_array($this->container['timeBasedScore'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'timeBasedScore', must be one of '%s'",
                $this->container['timeBasedScore'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tierRulesApply'] === null) {
            $invalidProperties[] = "'tierRulesApply' can't be null";
        }
        if ($this->container['tierRuleNoAgentNoWait'] === null) {
            $invalidProperties[] = "'tierRuleNoAgentNoWait' can't be null";
        }
        if ($this->container['tierRuleWaitMultiplyLevel'] === null) {
            $invalidProperties[] = "'tierRuleWaitMultiplyLevel' can't be null";
        }
        if ($this->container['abandonedResumeAllowed'] === null) {
            $invalidProperties[] = "'abandonedResumeAllowed' can't be null";
        }
        if ($this->container['maxWaitTimeNoAgentTimeReached'] === null) {
            $invalidProperties[] = "'maxWaitTimeNoAgentTimeReached' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 45)) {
            throw new \InvalidArgumentException('invalid length for $name when calling GetCallQueue200Response., must be smaller than or equal to 45.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets strategy
     *
     * @return string
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     *
     * @param string $strategy strategy
     *
     * @return self
     */
    public function setStrategy($strategy)
    {
        if (is_null($strategy)) {
            throw new \InvalidArgumentException('non-nullable strategy cannot be null');
        }
        $allowedValues = $this->getStrategyAllowableValues();
        if (!in_array($strategy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strategy', must be one of '%s'",
                    $strategy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strategy'] = $strategy;

        return $this;
    }

    /**
     * Gets announcePosition
     *
     * @return int|null
     */
    public function getAnnouncePosition()
    {
        return $this->container['announcePosition'];
    }

    /**
     * Sets announcePosition
     *
     * @param int|null $announcePosition announcePosition
     *
     * @return self
     */
    public function setAnnouncePosition($announcePosition)
    {
        if (is_null($announcePosition)) {
            throw new \InvalidArgumentException('non-nullable announcePosition cannot be null');
        }
        $this->container['announcePosition'] = $announcePosition;

        return $this;
    }

    /**
     * Gets moh
     *
     * @return string
     */
    public function getMoh()
    {
        return $this->container['moh'];
    }

    /**
     * Sets moh
     *
     * @param string $moh moh
     *
     * @return self
     */
    public function setMoh($moh)
    {
        if (is_null($moh)) {
            throw new \InvalidArgumentException('non-nullable moh cannot be null');
        }
        if ((mb_strlen($moh) > 255)) {
            throw new \InvalidArgumentException('invalid length for $moh when calling GetCallQueue200Response., must be smaller than or equal to 255.');
        }

        $this->container['moh'] = $moh;

        return $this;
    }

    /**
     * Gets callerResumeTimeout
     *
     * @return int
     */
    public function getCallerResumeTimeout()
    {
        return $this->container['callerResumeTimeout'];
    }

    /**
     * Sets callerResumeTimeout
     *
     * @param int $callerResumeTimeout callerResumeTimeout
     *
     * @return self
     */
    public function setCallerResumeTimeout($callerResumeTimeout)
    {
        if (is_null($callerResumeTimeout)) {
            throw new \InvalidArgumentException('non-nullable callerResumeTimeout cannot be null');
        }
        $this->container['callerResumeTimeout'] = $callerResumeTimeout;

        return $this;
    }

    /**
     * Gets maxWaitTime
     *
     * @return int
     */
    public function getMaxWaitTime()
    {
        return $this->container['maxWaitTime'];
    }

    /**
     * Sets maxWaitTime
     *
     * @param int $maxWaitTime maxWaitTime
     *
     * @return self
     */
    public function setMaxWaitTime($maxWaitTime)
    {
        if (is_null($maxWaitTime)) {
            throw new \InvalidArgumentException('non-nullable maxWaitTime cannot be null');
        }
        $this->container['maxWaitTime'] = $maxWaitTime;

        return $this;
    }

    /**
     * Gets maxWaitTimeNoAgent
     *
     * @return int
     */
    public function getMaxWaitTimeNoAgent()
    {
        return $this->container['maxWaitTimeNoAgent'];
    }

    /**
     * Sets maxWaitTimeNoAgent
     *
     * @param int $maxWaitTimeNoAgent maxWaitTimeNoAgent
     *
     * @return self
     */
    public function setMaxWaitTimeNoAgent($maxWaitTimeNoAgent)
    {
        if (is_null($maxWaitTimeNoAgent)) {
            throw new \InvalidArgumentException('non-nullable maxWaitTimeNoAgent cannot be null');
        }
        $this->container['maxWaitTimeNoAgent'] = $maxWaitTimeNoAgent;

        return $this;
    }

    /**
     * Gets maxNoAnswer
     *
     * @return int
     */
    public function getMaxNoAnswer()
    {
        return $this->container['maxNoAnswer'];
    }

    /**
     * Sets maxNoAnswer
     *
     * @param int $maxNoAnswer maxNoAnswer
     *
     * @return self
     */
    public function setMaxNoAnswer($maxNoAnswer)
    {
        if (is_null($maxNoAnswer)) {
            throw new \InvalidArgumentException('non-nullable maxNoAnswer cannot be null');
        }
        $this->container['maxNoAnswer'] = $maxNoAnswer;

        return $this;
    }

    /**
     * Gets noAnswerDelayTimeout
     *
     * @return int|null
     */
    public function getNoAnswerDelayTimeout()
    {
        return $this->container['noAnswerDelayTimeout'];
    }

    /**
     * Sets noAnswerDelayTimeout
     *
     * @param int|null $noAnswerDelayTimeout noAnswerDelayTimeout
     *
     * @return self
     */
    public function setNoAnswerDelayTimeout($noAnswerDelayTimeout)
    {
        if (is_null($noAnswerDelayTimeout)) {
            throw new \InvalidArgumentException('non-nullable noAnswerDelayTimeout cannot be null');
        }
        $this->container['noAnswerDelayTimeout'] = $noAnswerDelayTimeout;

        return $this;
    }

    /**
     * Gets rejectTimeout
     *
     * @return int|null
     */
    public function getRejectTimeout()
    {
        return $this->container['rejectTimeout'];
    }

    /**
     * Sets rejectTimeout
     *
     * @param int|null $rejectTimeout rejectTimeout
     *
     * @return self
     */
    public function setRejectTimeout($rejectTimeout)
    {
        if (is_null($rejectTimeout)) {
            throw new \InvalidArgumentException('non-nullable rejectTimeout cannot be null');
        }
        $this->container['rejectTimeout'] = $rejectTimeout;

        return $this;
    }

    /**
     * Gets busyTimeout
     *
     * @return int|null
     */
    public function getBusyTimeout()
    {
        return $this->container['busyTimeout'];
    }

    /**
     * Sets busyTimeout
     *
     * @param int|null $busyTimeout busyTimeout
     *
     * @return self
     */
    public function setBusyTimeout($busyTimeout)
    {
        if (is_null($busyTimeout)) {
            throw new \InvalidArgumentException('non-nullable busyTimeout cannot be null');
        }
        $this->container['busyTimeout'] = $busyTimeout;

        return $this;
    }

    /**
     * Gets wrapUpTimeout
     *
     * @return int|null
     */
    public function getWrapUpTimeout()
    {
        return $this->container['wrapUpTimeout'];
    }

    /**
     * Sets wrapUpTimeout
     *
     * @param int|null $wrapUpTimeout wrapUpTimeout
     *
     * @return self
     */
    public function setWrapUpTimeout($wrapUpTimeout)
    {
        if (is_null($wrapUpTimeout)) {
            throw new \InvalidArgumentException('non-nullable wrapUpTimeout cannot be null');
        }
        $this->container['wrapUpTimeout'] = $wrapUpTimeout;

        return $this;
    }

    /**
     * Gets timeBasedScore
     *
     * @return string
     */
    public function getTimeBasedScore()
    {
        return $this->container['timeBasedScore'];
    }

    /**
     * Sets timeBasedScore
     *
     * @param string $timeBasedScore timeBasedScore
     *
     * @return self
     */
    public function setTimeBasedScore($timeBasedScore)
    {
        if (is_null($timeBasedScore)) {
            throw new \InvalidArgumentException('non-nullable timeBasedScore cannot be null');
        }
        $allowedValues = $this->getTimeBasedScoreAllowableValues();
        if (!in_array($timeBasedScore, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'timeBasedScore', must be one of '%s'",
                    $timeBasedScore,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timeBasedScore'] = $timeBasedScore;

        return $this;
    }

    /**
     * Gets tierRulesApply
     *
     * @return bool
     */
    public function getTierRulesApply()
    {
        return $this->container['tierRulesApply'];
    }

    /**
     * Sets tierRulesApply
     *
     * @param bool $tierRulesApply tierRulesApply
     *
     * @return self
     */
    public function setTierRulesApply($tierRulesApply)
    {
        if (is_null($tierRulesApply)) {
            throw new \InvalidArgumentException('non-nullable tierRulesApply cannot be null');
        }
        $this->container['tierRulesApply'] = $tierRulesApply;

        return $this;
    }

    /**
     * Gets tierRuleNoAgentNoWait
     *
     * @return bool
     */
    public function getTierRuleNoAgentNoWait()
    {
        return $this->container['tierRuleNoAgentNoWait'];
    }

    /**
     * Sets tierRuleNoAgentNoWait
     *
     * @param bool $tierRuleNoAgentNoWait tierRuleNoAgentNoWait
     *
     * @return self
     */
    public function setTierRuleNoAgentNoWait($tierRuleNoAgentNoWait)
    {
        if (is_null($tierRuleNoAgentNoWait)) {
            throw new \InvalidArgumentException('non-nullable tierRuleNoAgentNoWait cannot be null');
        }
        $this->container['tierRuleNoAgentNoWait'] = $tierRuleNoAgentNoWait;

        return $this;
    }

    /**
     * Gets tierRuleWaitSecond
     *
     * @return int|null
     */
    public function getTierRuleWaitSecond()
    {
        return $this->container['tierRuleWaitSecond'];
    }

    /**
     * Sets tierRuleWaitSecond
     *
     * @param int|null $tierRuleWaitSecond tierRuleWaitSecond
     *
     * @return self
     */
    public function setTierRuleWaitSecond($tierRuleWaitSecond)
    {
        if (is_null($tierRuleWaitSecond)) {
            throw new \InvalidArgumentException('non-nullable tierRuleWaitSecond cannot be null');
        }
        $this->container['tierRuleWaitSecond'] = $tierRuleWaitSecond;

        return $this;
    }

    /**
     * Gets tierRuleWaitMultiplyLevel
     *
     * @return bool
     */
    public function getTierRuleWaitMultiplyLevel()
    {
        return $this->container['tierRuleWaitMultiplyLevel'];
    }

    /**
     * Sets tierRuleWaitMultiplyLevel
     *
     * @param bool $tierRuleWaitMultiplyLevel tierRuleWaitMultiplyLevel
     *
     * @return self
     */
    public function setTierRuleWaitMultiplyLevel($tierRuleWaitMultiplyLevel)
    {
        if (is_null($tierRuleWaitMultiplyLevel)) {
            throw new \InvalidArgumentException('non-nullable tierRuleWaitMultiplyLevel cannot be null');
        }
        $this->container['tierRuleWaitMultiplyLevel'] = $tierRuleWaitMultiplyLevel;

        return $this;
    }

    /**
     * Gets abandonedResumeAllowed
     *
     * @return bool
     */
    public function getAbandonedResumeAllowed()
    {
        return $this->container['abandonedResumeAllowed'];
    }

    /**
     * Sets abandonedResumeAllowed
     *
     * @param bool $abandonedResumeAllowed abandonedResumeAllowed
     *
     * @return self
     */
    public function setAbandonedResumeAllowed($abandonedResumeAllowed)
    {
        if (is_null($abandonedResumeAllowed)) {
            throw new \InvalidArgumentException('non-nullable abandonedResumeAllowed cannot be null');
        }
        $this->container['abandonedResumeAllowed'] = $abandonedResumeAllowed;

        return $this;
    }

    /**
     * Gets discardAbandonedAfter
     *
     * @return int|null
     */
    public function getDiscardAbandonedAfter()
    {
        return $this->container['discardAbandonedAfter'];
    }

    /**
     * Sets discardAbandonedAfter
     *
     * @param int|null $discardAbandonedAfter discardAbandonedAfter
     *
     * @return self
     */
    public function setDiscardAbandonedAfter($discardAbandonedAfter)
    {
        if (is_null($discardAbandonedAfter)) {
            throw new \InvalidArgumentException('non-nullable discardAbandonedAfter cannot be null');
        }
        $this->container['discardAbandonedAfter'] = $discardAbandonedAfter;

        return $this;
    }

    /**
     * Gets maxWaitTimeNoAgentTimeReached
     *
     * @return int
     */
    public function getMaxWaitTimeNoAgentTimeReached()
    {
        return $this->container['maxWaitTimeNoAgentTimeReached'];
    }

    /**
     * Sets maxWaitTimeNoAgentTimeReached
     *
     * @param int $maxWaitTimeNoAgentTimeReached maxWaitTimeNoAgentTimeReached
     *
     * @return self
     */
    public function setMaxWaitTimeNoAgentTimeReached($maxWaitTimeNoAgentTimeReached)
    {
        if (is_null($maxWaitTimeNoAgentTimeReached)) {
            throw new \InvalidArgumentException('non-nullable maxWaitTimeNoAgentTimeReached cannot be null');
        }
        $this->container['maxWaitTimeNoAgentTimeReached'] = $maxWaitTimeNoAgentTimeReached;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets createdByUserId
     *
     * @return string|null
     */
    public function getCreatedByUserId()
    {
        return $this->container['createdByUserId'];
    }

    /**
     * Sets createdByUserId
     *
     * @param string|null $createdByUserId ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setCreatedByUserId($createdByUserId)
    {
        if (is_null($createdByUserId)) {
            throw new \InvalidArgumentException('non-nullable createdByUserId cannot be null');
        }
        $this->container['createdByUserId'] = $createdByUserId;

        return $this;
    }

    /**
     * Gets updatedByUserId
     *
     * @return string|null
     */
    public function getUpdatedByUserId()
    {
        return $this->container['updatedByUserId'];
    }

    /**
     * Sets updatedByUserId
     *
     * @param string|null $updatedByUserId ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setUpdatedByUserId($updatedByUserId)
    {
        if (is_null($updatedByUserId)) {
            throw new \InvalidArgumentException('non-nullable updatedByUserId cannot be null');
        }
        $this->container['updatedByUserId'] = $updatedByUserId;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


