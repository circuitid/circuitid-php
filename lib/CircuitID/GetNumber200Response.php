<?php
/**
 * GetNumber200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.20
 * Contact: support@circuitid.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\CircuitID;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetNumber200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNumber200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNumber_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inUse' => 'int',
        'name' => 'string',
        'countryCode' => 'string',
        'amount' => 'int',
        'perMinuteRate' => 'int',
        'provider' => 'string',
        'originalProvider' => 'string',
        'providerOrderId' => 'string',
        'fax' => 'int',
        'voice' => 'int',
        'status' => 'int',
        'sms' => 'int',
        'mms' => 'int',
        'changeRegionOrderId' => 'string',
        'changeRegionOrderDate' => '\DateTime',
        'directoryListing' => 'string',
        'directoryListingOrderId' => 'string',
        'directoryListingOrderDate' => '\DateTime',
        'callerName' => 'string',
        'callerNameOrderId' => 'string',
        'callerNameOrderDate' => '\DateTime',
        'e911' => 'string',
        'e911OrderId' => 'string',
        'e911OrderDate' => '\DateTime',
        'messageCampaign' => 'string',
        'messageClass' => 'string',
        'messageType' => 'string',
        'messageCampaignOrderId' => 'string',
        'messageCampaignOrderDate' => '\DateTime',
        'e911Supported' => 'int',
        'callerNameSupported' => 'int',
        'directoryListingSupported' => 'int',
        'messagingSupported' => 'int',
        'destinationType' => 'string',
        'destination' => 'string',
        'ref' => 'string',
        'callForwardingDestination' => 'string',
        'id' => 'string',
        'createdByUserId' => 'string',
        'updatedByUserId' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inUse' => 'int32',
        'name' => null,
        'countryCode' => null,
        'amount' => 'int32',
        'perMinuteRate' => 'int32',
        'provider' => null,
        'originalProvider' => null,
        'providerOrderId' => null,
        'fax' => 'int32',
        'voice' => 'int32',
        'status' => 'int32',
        'sms' => 'int32',
        'mms' => 'int32',
        'changeRegionOrderId' => null,
        'changeRegionOrderDate' => 'date-time',
        'directoryListing' => null,
        'directoryListingOrderId' => null,
        'directoryListingOrderDate' => 'date-time',
        'callerName' => null,
        'callerNameOrderId' => null,
        'callerNameOrderDate' => 'date-time',
        'e911' => null,
        'e911OrderId' => null,
        'e911OrderDate' => 'date-time',
        'messageCampaign' => null,
        'messageClass' => null,
        'messageType' => null,
        'messageCampaignOrderId' => null,
        'messageCampaignOrderDate' => 'date-time',
        'e911Supported' => 'int32',
        'callerNameSupported' => 'int32',
        'directoryListingSupported' => 'int32',
        'messagingSupported' => 'int32',
        'destinationType' => null,
        'destination' => null,
        'ref' => null,
        'callForwardingDestination' => null,
        'id' => null,
        'createdByUserId' => null,
        'updatedByUserId' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'inUse' => false,
		'name' => false,
		'countryCode' => false,
		'amount' => false,
		'perMinuteRate' => false,
		'provider' => false,
		'originalProvider' => false,
		'providerOrderId' => false,
		'fax' => false,
		'voice' => false,
		'status' => false,
		'sms' => false,
		'mms' => false,
		'changeRegionOrderId' => false,
		'changeRegionOrderDate' => false,
		'directoryListing' => false,
		'directoryListingOrderId' => false,
		'directoryListingOrderDate' => false,
		'callerName' => false,
		'callerNameOrderId' => false,
		'callerNameOrderDate' => false,
		'e911' => false,
		'e911OrderId' => false,
		'e911OrderDate' => false,
		'messageCampaign' => false,
		'messageClass' => false,
		'messageType' => false,
		'messageCampaignOrderId' => false,
		'messageCampaignOrderDate' => false,
		'e911Supported' => false,
		'callerNameSupported' => false,
		'directoryListingSupported' => false,
		'messagingSupported' => false,
		'destinationType' => false,
		'destination' => false,
		'ref' => false,
		'callForwardingDestination' => false,
		'id' => false,
		'createdByUserId' => false,
		'updatedByUserId' => false,
		'createdAt' => false,
		'updatedAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inUse' => 'inUse',
        'name' => 'name',
        'countryCode' => 'countryCode',
        'amount' => 'amount',
        'perMinuteRate' => 'perMinuteRate',
        'provider' => 'provider',
        'originalProvider' => 'originalProvider',
        'providerOrderId' => 'providerOrderId',
        'fax' => 'fax',
        'voice' => 'voice',
        'status' => 'status',
        'sms' => 'sms',
        'mms' => 'mms',
        'changeRegionOrderId' => 'changeRegionOrderId',
        'changeRegionOrderDate' => 'changeRegionOrderDate',
        'directoryListing' => 'directoryListing',
        'directoryListingOrderId' => 'directoryListingOrderId',
        'directoryListingOrderDate' => 'directoryListingOrderDate',
        'callerName' => 'callerName',
        'callerNameOrderId' => 'callerNameOrderId',
        'callerNameOrderDate' => 'callerNameOrderDate',
        'e911' => 'e911',
        'e911OrderId' => 'e911OrderId',
        'e911OrderDate' => 'e911OrderDate',
        'messageCampaign' => 'messageCampaign',
        'messageClass' => 'messageClass',
        'messageType' => 'messageType',
        'messageCampaignOrderId' => 'messageCampaignOrderId',
        'messageCampaignOrderDate' => 'messageCampaignOrderDate',
        'e911Supported' => 'e911Supported',
        'callerNameSupported' => 'callerNameSupported',
        'directoryListingSupported' => 'directoryListingSupported',
        'messagingSupported' => 'messagingSupported',
        'destinationType' => 'destinationType',
        'destination' => 'destination',
        'ref' => 'ref',
        'callForwardingDestination' => 'callForwardingDestination',
        'id' => '_id',
        'createdByUserId' => 'createdByUserId',
        'updatedByUserId' => 'updatedByUserId',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inUse' => 'setInUse',
        'name' => 'setName',
        'countryCode' => 'setCountryCode',
        'amount' => 'setAmount',
        'perMinuteRate' => 'setPerMinuteRate',
        'provider' => 'setProvider',
        'originalProvider' => 'setOriginalProvider',
        'providerOrderId' => 'setProviderOrderId',
        'fax' => 'setFax',
        'voice' => 'setVoice',
        'status' => 'setStatus',
        'sms' => 'setSms',
        'mms' => 'setMms',
        'changeRegionOrderId' => 'setChangeRegionOrderId',
        'changeRegionOrderDate' => 'setChangeRegionOrderDate',
        'directoryListing' => 'setDirectoryListing',
        'directoryListingOrderId' => 'setDirectoryListingOrderId',
        'directoryListingOrderDate' => 'setDirectoryListingOrderDate',
        'callerName' => 'setCallerName',
        'callerNameOrderId' => 'setCallerNameOrderId',
        'callerNameOrderDate' => 'setCallerNameOrderDate',
        'e911' => 'setE911',
        'e911OrderId' => 'setE911OrderId',
        'e911OrderDate' => 'setE911OrderDate',
        'messageCampaign' => 'setMessageCampaign',
        'messageClass' => 'setMessageClass',
        'messageType' => 'setMessageType',
        'messageCampaignOrderId' => 'setMessageCampaignOrderId',
        'messageCampaignOrderDate' => 'setMessageCampaignOrderDate',
        'e911Supported' => 'setE911Supported',
        'callerNameSupported' => 'setCallerNameSupported',
        'directoryListingSupported' => 'setDirectoryListingSupported',
        'messagingSupported' => 'setMessagingSupported',
        'destinationType' => 'setDestinationType',
        'destination' => 'setDestination',
        'ref' => 'setRef',
        'callForwardingDestination' => 'setCallForwardingDestination',
        'id' => 'setId',
        'createdByUserId' => 'setCreatedByUserId',
        'updatedByUserId' => 'setUpdatedByUserId',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inUse' => 'getInUse',
        'name' => 'getName',
        'countryCode' => 'getCountryCode',
        'amount' => 'getAmount',
        'perMinuteRate' => 'getPerMinuteRate',
        'provider' => 'getProvider',
        'originalProvider' => 'getOriginalProvider',
        'providerOrderId' => 'getProviderOrderId',
        'fax' => 'getFax',
        'voice' => 'getVoice',
        'status' => 'getStatus',
        'sms' => 'getSms',
        'mms' => 'getMms',
        'changeRegionOrderId' => 'getChangeRegionOrderId',
        'changeRegionOrderDate' => 'getChangeRegionOrderDate',
        'directoryListing' => 'getDirectoryListing',
        'directoryListingOrderId' => 'getDirectoryListingOrderId',
        'directoryListingOrderDate' => 'getDirectoryListingOrderDate',
        'callerName' => 'getCallerName',
        'callerNameOrderId' => 'getCallerNameOrderId',
        'callerNameOrderDate' => 'getCallerNameOrderDate',
        'e911' => 'getE911',
        'e911OrderId' => 'getE911OrderId',
        'e911OrderDate' => 'getE911OrderDate',
        'messageCampaign' => 'getMessageCampaign',
        'messageClass' => 'getMessageClass',
        'messageType' => 'getMessageType',
        'messageCampaignOrderId' => 'getMessageCampaignOrderId',
        'messageCampaignOrderDate' => 'getMessageCampaignOrderDate',
        'e911Supported' => 'getE911Supported',
        'callerNameSupported' => 'getCallerNameSupported',
        'directoryListingSupported' => 'getDirectoryListingSupported',
        'messagingSupported' => 'getMessagingSupported',
        'destinationType' => 'getDestinationType',
        'destination' => 'getDestination',
        'ref' => 'getRef',
        'callForwardingDestination' => 'getCallForwardingDestination',
        'id' => 'getId',
        'createdByUserId' => 'getCreatedByUserId',
        'updatedByUserId' => 'getUpdatedByUserId',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const IN_USE_1 = 1;
    public const IN_USE_0 = 0;
    public const FAX_1 = 1;
    public const FAX_0 = 0;
    public const VOICE_1 = 1;
    public const VOICE_0 = 0;
    public const STATUS_1 = 1;
    public const STATUS_0 = 0;
    public const SMS_1 = 1;
    public const SMS_0 = 0;
    public const MMS_1 = 1;
    public const MMS_0 = 0;
    public const MESSAGE_CLASS_P2_P = 'P2P';
    public const MESSAGE_CLASS_A2_PLC = 'A2PLC';
    public const MESSAGE_CLASS_A2_P8_XX = 'A2P8XX';
    public const MESSAGE_TYPE_SMS = 'SMS';
    public const MESSAGE_TYPE_MMS = 'MMS';
    public const MESSAGE_TYPE_SMSMMS = 'SMSMMS';
    public const MESSAGE_TYPE_SMS_ALT = 'SMS_ALT';
    public const MESSAGE_TYPE_MMS_ALT = 'MMS_ALT';
    public const MESSAGE_TYPE_SMSMMS_ALT = 'SMSMMS_ALT';
    public const E911_SUPPORTED_1 = 1;
    public const E911_SUPPORTED_0 = 0;
    public const CALLER_NAME_SUPPORTED_1 = 1;
    public const CALLER_NAME_SUPPORTED_0 = 0;
    public const DIRECTORY_LISTING_SUPPORTED_1 = 1;
    public const DIRECTORY_LISTING_SUPPORTED_0 = 0;
    public const MESSAGING_SUPPORTED_1 = 1;
    public const MESSAGING_SUPPORTED_0 = 0;
    public const DESTINATION_TYPE_ANNOUNCEMENTS = 'announcements';
    public const DESTINATION_TYPE_DIRECTORIES = 'directories';
    public const DESTINATION_TYPE_PARK = 'park';
    public const DESTINATION_TYPE_NUMBERS = 'numbers';
    public const DESTINATION_TYPE_MENUS = 'menus';
    public const DESTINATION_TYPE_USERS = 'users';
    public const DESTINATION_TYPE_SERVERS = 'servers';
    public const DESTINATION_TYPE_INBOUNDRULES = 'inboundrules';
    public const DESTINATION_TYPE_CALLQUEUES = 'callqueues';
    public const DESTINATION_TYPE_FAXACCOUNTS = 'faxaccounts';
    public const DESTINATION_TYPE_CALLFORWARDING = 'callforwarding';
    public const DESTINATION_TYPE_HANGUP = 'hangup';
    public const DESTINATION_TYPE_PHONEINBOUNDRULES = 'phoneinboundrules';
    public const DESTINATION_TYPE_VOICEMAILACCOUNTS = 'voicemailaccounts';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInUseAllowableValues()
    {
        return [
            self::IN_USE_1,
            self::IN_USE_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFaxAllowableValues()
    {
        return [
            self::FAX_1,
            self::FAX_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoiceAllowableValues()
    {
        return [
            self::VOICE_1,
            self::VOICE_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_1,
            self::STATUS_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmsAllowableValues()
    {
        return [
            self::SMS_1,
            self::SMS_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMmsAllowableValues()
    {
        return [
            self::MMS_1,
            self::MMS_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageClassAllowableValues()
    {
        return [
            self::MESSAGE_CLASS_P2_P,
            self::MESSAGE_CLASS_A2_PLC,
            self::MESSAGE_CLASS_A2_P8_XX,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageTypeAllowableValues()
    {
        return [
            self::MESSAGE_TYPE_SMS,
            self::MESSAGE_TYPE_MMS,
            self::MESSAGE_TYPE_SMSMMS,
            self::MESSAGE_TYPE_SMS_ALT,
            self::MESSAGE_TYPE_MMS_ALT,
            self::MESSAGE_TYPE_SMSMMS_ALT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getE911SupportedAllowableValues()
    {
        return [
            self::E911_SUPPORTED_1,
            self::E911_SUPPORTED_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCallerNameSupportedAllowableValues()
    {
        return [
            self::CALLER_NAME_SUPPORTED_1,
            self::CALLER_NAME_SUPPORTED_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectoryListingSupportedAllowableValues()
    {
        return [
            self::DIRECTORY_LISTING_SUPPORTED_1,
            self::DIRECTORY_LISTING_SUPPORTED_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessagingSupportedAllowableValues()
    {
        return [
            self::MESSAGING_SUPPORTED_1,
            self::MESSAGING_SUPPORTED_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDestinationTypeAllowableValues()
    {
        return [
            self::DESTINATION_TYPE_ANNOUNCEMENTS,
            self::DESTINATION_TYPE_DIRECTORIES,
            self::DESTINATION_TYPE_PARK,
            self::DESTINATION_TYPE_NUMBERS,
            self::DESTINATION_TYPE_MENUS,
            self::DESTINATION_TYPE_USERS,
            self::DESTINATION_TYPE_SERVERS,
            self::DESTINATION_TYPE_INBOUNDRULES,
            self::DESTINATION_TYPE_CALLQUEUES,
            self::DESTINATION_TYPE_FAXACCOUNTS,
            self::DESTINATION_TYPE_CALLFORWARDING,
            self::DESTINATION_TYPE_HANGUP,
            self::DESTINATION_TYPE_PHONEINBOUNDRULES,
            self::DESTINATION_TYPE_VOICEMAILACCOUNTS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('inUse', $data ?? [], self::IN_USE_1);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('countryCode', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('perMinuteRate', $data ?? [], null);
        $this->setIfExists('provider', $data ?? [], null);
        $this->setIfExists('originalProvider', $data ?? [], null);
        $this->setIfExists('providerOrderId', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], self::FAX_0);
        $this->setIfExists('voice', $data ?? [], self::VOICE_0);
        $this->setIfExists('status', $data ?? [], self::STATUS_1);
        $this->setIfExists('sms', $data ?? [], self::SMS_0);
        $this->setIfExists('mms', $data ?? [], self::MMS_0);
        $this->setIfExists('changeRegionOrderId', $data ?? [], null);
        $this->setIfExists('changeRegionOrderDate', $data ?? [], null);
        $this->setIfExists('directoryListing', $data ?? [], null);
        $this->setIfExists('directoryListingOrderId', $data ?? [], null);
        $this->setIfExists('directoryListingOrderDate', $data ?? [], null);
        $this->setIfExists('callerName', $data ?? [], null);
        $this->setIfExists('callerNameOrderId', $data ?? [], null);
        $this->setIfExists('callerNameOrderDate', $data ?? [], null);
        $this->setIfExists('e911', $data ?? [], null);
        $this->setIfExists('e911OrderId', $data ?? [], null);
        $this->setIfExists('e911OrderDate', $data ?? [], null);
        $this->setIfExists('messageCampaign', $data ?? [], null);
        $this->setIfExists('messageClass', $data ?? [], null);
        $this->setIfExists('messageType', $data ?? [], null);
        $this->setIfExists('messageCampaignOrderId', $data ?? [], null);
        $this->setIfExists('messageCampaignOrderDate', $data ?? [], null);
        $this->setIfExists('e911Supported', $data ?? [], self::E911_SUPPORTED_0);
        $this->setIfExists('callerNameSupported', $data ?? [], self::CALLER_NAME_SUPPORTED_0);
        $this->setIfExists('directoryListingSupported', $data ?? [], self::DIRECTORY_LISTING_SUPPORTED_0);
        $this->setIfExists('messagingSupported', $data ?? [], self::MESSAGING_SUPPORTED_0);
        $this->setIfExists('destinationType', $data ?? [], 'park');
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('ref', $data ?? [], null);
        $this->setIfExists('callForwardingDestination', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('createdByUserId', $data ?? [], null);
        $this->setIfExists('updatedByUserId', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInUseAllowableValues();
        if (!is_null($this->container['inUse']) && !in_array($this->container['inUse'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'inUse', must be one of '%s'",
                $this->container['inUse'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 20)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['name']) < 10)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 10.";
        }

        if ($this->container['countryCode'] === null) {
            $invalidProperties[] = "'countryCode' can't be null";
        }
        if ((mb_strlen($this->container['countryCode']) > 4)) {
            $invalidProperties[] = "invalid value for 'countryCode', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['countryCode']) < 1)) {
            $invalidProperties[] = "invalid value for 'countryCode', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['provider'] === null) {
            $invalidProperties[] = "'provider' can't be null";
        }
        if (!is_null($this->container['providerOrderId']) && (mb_strlen($this->container['providerOrderId']) > 45)) {
            $invalidProperties[] = "invalid value for 'providerOrderId', the character length must be smaller than or equal to 45.";
        }

        $allowedValues = $this->getFaxAllowableValues();
        if (!is_null($this->container['fax']) && !in_array($this->container['fax'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fax', must be one of '%s'",
                $this->container['fax'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVoiceAllowableValues();
        if (!is_null($this->container['voice']) && !in_array($this->container['voice'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'voice', must be one of '%s'",
                $this->container['voice'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSmsAllowableValues();
        if (!is_null($this->container['sms']) && !in_array($this->container['sms'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sms', must be one of '%s'",
                $this->container['sms'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMmsAllowableValues();
        if (!is_null($this->container['mms']) && !in_array($this->container['mms'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mms', must be one of '%s'",
                $this->container['mms'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['changeRegionOrderId']) && (mb_strlen($this->container['changeRegionOrderId']) > 45)) {
            $invalidProperties[] = "invalid value for 'changeRegionOrderId', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['changeRegionOrderId']) && (mb_strlen($this->container['changeRegionOrderId']) < 5)) {
            $invalidProperties[] = "invalid value for 'changeRegionOrderId', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['directoryListingOrderId']) && (mb_strlen($this->container['directoryListingOrderId']) > 45)) {
            $invalidProperties[] = "invalid value for 'directoryListingOrderId', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['directoryListingOrderId']) && (mb_strlen($this->container['directoryListingOrderId']) < 5)) {
            $invalidProperties[] = "invalid value for 'directoryListingOrderId', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['callerName']) && (mb_strlen($this->container['callerName']) > 45)) {
            $invalidProperties[] = "invalid value for 'callerName', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['callerNameOrderId']) && (mb_strlen($this->container['callerNameOrderId']) > 45)) {
            $invalidProperties[] = "invalid value for 'callerNameOrderId', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['e911OrderId']) && (mb_strlen($this->container['e911OrderId']) > 45)) {
            $invalidProperties[] = "invalid value for 'e911OrderId', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['e911OrderId']) && (mb_strlen($this->container['e911OrderId']) < 5)) {
            $invalidProperties[] = "invalid value for 'e911OrderId', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['messageCampaign']) && (mb_strlen($this->container['messageCampaign']) > 45)) {
            $invalidProperties[] = "invalid value for 'messageCampaign', the character length must be smaller than or equal to 45.";
        }

        $allowedValues = $this->getMessageClassAllowableValues();
        if (!is_null($this->container['messageClass']) && !in_array($this->container['messageClass'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'messageClass', must be one of '%s'",
                $this->container['messageClass'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!is_null($this->container['messageType']) && !in_array($this->container['messageType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'messageType', must be one of '%s'",
                $this->container['messageType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['messageCampaignOrderId']) && (mb_strlen($this->container['messageCampaignOrderId']) > 45)) {
            $invalidProperties[] = "invalid value for 'messageCampaignOrderId', the character length must be smaller than or equal to 45.";
        }

        $allowedValues = $this->getE911SupportedAllowableValues();
        if (!is_null($this->container['e911Supported']) && !in_array($this->container['e911Supported'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'e911Supported', must be one of '%s'",
                $this->container['e911Supported'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCallerNameSupportedAllowableValues();
        if (!is_null($this->container['callerNameSupported']) && !in_array($this->container['callerNameSupported'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'callerNameSupported', must be one of '%s'",
                $this->container['callerNameSupported'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDirectoryListingSupportedAllowableValues();
        if (!is_null($this->container['directoryListingSupported']) && !in_array($this->container['directoryListingSupported'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'directoryListingSupported', must be one of '%s'",
                $this->container['directoryListingSupported'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMessagingSupportedAllowableValues();
        if (!is_null($this->container['messagingSupported']) && !in_array($this->container['messagingSupported'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'messagingSupported', must be one of '%s'",
                $this->container['messagingSupported'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['destinationType'] === null) {
            $invalidProperties[] = "'destinationType' can't be null";
        }
        $allowedValues = $this->getDestinationTypeAllowableValues();
        if (!is_null($this->container['destinationType']) && !in_array($this->container['destinationType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'destinationType', must be one of '%s'",
                $this->container['destinationType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ref']) && (mb_strlen($this->container['ref']) > 100)) {
            $invalidProperties[] = "invalid value for 'ref', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['ref']) && (mb_strlen($this->container['ref']) < 5)) {
            $invalidProperties[] = "invalid value for 'ref', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['callForwardingDestination']) && (mb_strlen($this->container['callForwardingDestination']) > 45)) {
            $invalidProperties[] = "invalid value for 'callForwardingDestination', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['callForwardingDestination']) && (mb_strlen($this->container['callForwardingDestination']) < 10)) {
            $invalidProperties[] = "invalid value for 'callForwardingDestination', the character length must be bigger than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inUse
     *
     * @return int|null
     */
    public function getInUse()
    {
        return $this->container['inUse'];
    }

    /**
     * Sets inUse
     *
     * @param int|null $inUse inUse
     *
     * @return self
     */
    public function setInUse($inUse)
    {
        if (is_null($inUse)) {
            throw new \InvalidArgumentException('non-nullable inUse cannot be null');
        }
        $allowedValues = $this->getInUseAllowableValues();
        if (!in_array($inUse, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'inUse', must be one of '%s'",
                    $inUse,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['inUse'] = $inUse;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 20)) {
            throw new \InvalidArgumentException('invalid length for $name when calling GetNumber200Response., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($name) < 10)) {
            throw new \InvalidArgumentException('invalid length for $name when calling GetNumber200Response., must be bigger than or equal to 10.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode countryCode
     *
     * @return self
     */
    public function setCountryCode($countryCode)
    {
        if (is_null($countryCode)) {
            throw new \InvalidArgumentException('non-nullable countryCode cannot be null');
        }
        if ((mb_strlen($countryCode) > 4)) {
            throw new \InvalidArgumentException('invalid length for $countryCode when calling GetNumber200Response., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($countryCode) < 1)) {
            throw new \InvalidArgumentException('invalid length for $countryCode when calling GetNumber200Response., must be bigger than or equal to 1.');
        }

        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets perMinuteRate
     *
     * @return int|null
     */
    public function getPerMinuteRate()
    {
        return $this->container['perMinuteRate'];
    }

    /**
     * Sets perMinuteRate
     *
     * @param int|null $perMinuteRate perMinuteRate
     *
     * @return self
     */
    public function setPerMinuteRate($perMinuteRate)
    {
        if (is_null($perMinuteRate)) {
            throw new \InvalidArgumentException('non-nullable perMinuteRate cannot be null');
        }
        $this->container['perMinuteRate'] = $perMinuteRate;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setProvider($provider)
    {
        if (is_null($provider)) {
            throw new \InvalidArgumentException('non-nullable provider cannot be null');
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets originalProvider
     *
     * @return string|null
     */
    public function getOriginalProvider()
    {
        return $this->container['originalProvider'];
    }

    /**
     * Sets originalProvider
     *
     * @param string|null $originalProvider ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setOriginalProvider($originalProvider)
    {
        if (is_null($originalProvider)) {
            throw new \InvalidArgumentException('non-nullable originalProvider cannot be null');
        }
        $this->container['originalProvider'] = $originalProvider;

        return $this;
    }

    /**
     * Gets providerOrderId
     *
     * @return string|null
     */
    public function getProviderOrderId()
    {
        return $this->container['providerOrderId'];
    }

    /**
     * Sets providerOrderId
     *
     * @param string|null $providerOrderId providerOrderId
     *
     * @return self
     */
    public function setProviderOrderId($providerOrderId)
    {
        if (is_null($providerOrderId)) {
            throw new \InvalidArgumentException('non-nullable providerOrderId cannot be null');
        }
        if ((mb_strlen($providerOrderId) > 45)) {
            throw new \InvalidArgumentException('invalid length for $providerOrderId when calling GetNumber200Response., must be smaller than or equal to 45.');
        }

        $this->container['providerOrderId'] = $providerOrderId;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return int|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param int|null $fax fax
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            throw new \InvalidArgumentException('non-nullable fax cannot be null');
        }
        $allowedValues = $this->getFaxAllowableValues();
        if (!in_array($fax, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fax', must be one of '%s'",
                    $fax,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets voice
     *
     * @return int|null
     */
    public function getVoice()
    {
        return $this->container['voice'];
    }

    /**
     * Sets voice
     *
     * @param int|null $voice voice
     *
     * @return self
     */
    public function setVoice($voice)
    {
        if (is_null($voice)) {
            throw new \InvalidArgumentException('non-nullable voice cannot be null');
        }
        $allowedValues = $this->getVoiceAllowableValues();
        if (!in_array($voice, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'voice', must be one of '%s'",
                    $voice,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voice'] = $voice;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sms
     *
     * @return int|null
     */
    public function getSms()
    {
        return $this->container['sms'];
    }

    /**
     * Sets sms
     *
     * @param int|null $sms sms
     *
     * @return self
     */
    public function setSms($sms)
    {
        if (is_null($sms)) {
            throw new \InvalidArgumentException('non-nullable sms cannot be null');
        }
        $allowedValues = $this->getSmsAllowableValues();
        if (!in_array($sms, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sms', must be one of '%s'",
                    $sms,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sms'] = $sms;

        return $this;
    }

    /**
     * Gets mms
     *
     * @return int|null
     */
    public function getMms()
    {
        return $this->container['mms'];
    }

    /**
     * Sets mms
     *
     * @param int|null $mms mms
     *
     * @return self
     */
    public function setMms($mms)
    {
        if (is_null($mms)) {
            throw new \InvalidArgumentException('non-nullable mms cannot be null');
        }
        $allowedValues = $this->getMmsAllowableValues();
        if (!in_array($mms, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mms', must be one of '%s'",
                    $mms,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mms'] = $mms;

        return $this;
    }

    /**
     * Gets changeRegionOrderId
     *
     * @return string|null
     */
    public function getChangeRegionOrderId()
    {
        return $this->container['changeRegionOrderId'];
    }

    /**
     * Sets changeRegionOrderId
     *
     * @param string|null $changeRegionOrderId changeRegionOrderId
     *
     * @return self
     */
    public function setChangeRegionOrderId($changeRegionOrderId)
    {
        if (is_null($changeRegionOrderId)) {
            throw new \InvalidArgumentException('non-nullable changeRegionOrderId cannot be null');
        }
        if ((mb_strlen($changeRegionOrderId) > 45)) {
            throw new \InvalidArgumentException('invalid length for $changeRegionOrderId when calling GetNumber200Response., must be smaller than or equal to 45.');
        }
        if ((mb_strlen($changeRegionOrderId) < 5)) {
            throw new \InvalidArgumentException('invalid length for $changeRegionOrderId when calling GetNumber200Response., must be bigger than or equal to 5.');
        }

        $this->container['changeRegionOrderId'] = $changeRegionOrderId;

        return $this;
    }

    /**
     * Gets changeRegionOrderDate
     *
     * @return \DateTime|null
     */
    public function getChangeRegionOrderDate()
    {
        return $this->container['changeRegionOrderDate'];
    }

    /**
     * Sets changeRegionOrderDate
     *
     * @param \DateTime|null $changeRegionOrderDate changeRegionOrderDate
     *
     * @return self
     */
    public function setChangeRegionOrderDate($changeRegionOrderDate)
    {
        if (is_null($changeRegionOrderDate)) {
            throw new \InvalidArgumentException('non-nullable changeRegionOrderDate cannot be null');
        }
        $this->container['changeRegionOrderDate'] = $changeRegionOrderDate;

        return $this;
    }

    /**
     * Gets directoryListing
     *
     * @return string|null
     */
    public function getDirectoryListing()
    {
        return $this->container['directoryListing'];
    }

    /**
     * Sets directoryListing
     *
     * @param string|null $directoryListing ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setDirectoryListing($directoryListing)
    {
        if (is_null($directoryListing)) {
            throw new \InvalidArgumentException('non-nullable directoryListing cannot be null');
        }
        $this->container['directoryListing'] = $directoryListing;

        return $this;
    }

    /**
     * Gets directoryListingOrderId
     *
     * @return string|null
     */
    public function getDirectoryListingOrderId()
    {
        return $this->container['directoryListingOrderId'];
    }

    /**
     * Sets directoryListingOrderId
     *
     * @param string|null $directoryListingOrderId directoryListingOrderId
     *
     * @return self
     */
    public function setDirectoryListingOrderId($directoryListingOrderId)
    {
        if (is_null($directoryListingOrderId)) {
            throw new \InvalidArgumentException('non-nullable directoryListingOrderId cannot be null');
        }
        if ((mb_strlen($directoryListingOrderId) > 45)) {
            throw new \InvalidArgumentException('invalid length for $directoryListingOrderId when calling GetNumber200Response., must be smaller than or equal to 45.');
        }
        if ((mb_strlen($directoryListingOrderId) < 5)) {
            throw new \InvalidArgumentException('invalid length for $directoryListingOrderId when calling GetNumber200Response., must be bigger than or equal to 5.');
        }

        $this->container['directoryListingOrderId'] = $directoryListingOrderId;

        return $this;
    }

    /**
     * Gets directoryListingOrderDate
     *
     * @return \DateTime|null
     */
    public function getDirectoryListingOrderDate()
    {
        return $this->container['directoryListingOrderDate'];
    }

    /**
     * Sets directoryListingOrderDate
     *
     * @param \DateTime|null $directoryListingOrderDate directoryListingOrderDate
     *
     * @return self
     */
    public function setDirectoryListingOrderDate($directoryListingOrderDate)
    {
        if (is_null($directoryListingOrderDate)) {
            throw new \InvalidArgumentException('non-nullable directoryListingOrderDate cannot be null');
        }
        $this->container['directoryListingOrderDate'] = $directoryListingOrderDate;

        return $this;
    }

    /**
     * Gets callerName
     *
     * @return string|null
     */
    public function getCallerName()
    {
        return $this->container['callerName'];
    }

    /**
     * Sets callerName
     *
     * @param string|null $callerName callerName
     *
     * @return self
     */
    public function setCallerName($callerName)
    {
        if (is_null($callerName)) {
            throw new \InvalidArgumentException('non-nullable callerName cannot be null');
        }
        if ((mb_strlen($callerName) > 45)) {
            throw new \InvalidArgumentException('invalid length for $callerName when calling GetNumber200Response., must be smaller than or equal to 45.');
        }

        $this->container['callerName'] = $callerName;

        return $this;
    }

    /**
     * Gets callerNameOrderId
     *
     * @return string|null
     */
    public function getCallerNameOrderId()
    {
        return $this->container['callerNameOrderId'];
    }

    /**
     * Sets callerNameOrderId
     *
     * @param string|null $callerNameOrderId callerNameOrderId
     *
     * @return self
     */
    public function setCallerNameOrderId($callerNameOrderId)
    {
        if (is_null($callerNameOrderId)) {
            throw new \InvalidArgumentException('non-nullable callerNameOrderId cannot be null');
        }
        if ((mb_strlen($callerNameOrderId) > 45)) {
            throw new \InvalidArgumentException('invalid length for $callerNameOrderId when calling GetNumber200Response., must be smaller than or equal to 45.');
        }

        $this->container['callerNameOrderId'] = $callerNameOrderId;

        return $this;
    }

    /**
     * Gets callerNameOrderDate
     *
     * @return \DateTime|null
     */
    public function getCallerNameOrderDate()
    {
        return $this->container['callerNameOrderDate'];
    }

    /**
     * Sets callerNameOrderDate
     *
     * @param \DateTime|null $callerNameOrderDate callerNameOrderDate
     *
     * @return self
     */
    public function setCallerNameOrderDate($callerNameOrderDate)
    {
        if (is_null($callerNameOrderDate)) {
            throw new \InvalidArgumentException('non-nullable callerNameOrderDate cannot be null');
        }
        $this->container['callerNameOrderDate'] = $callerNameOrderDate;

        return $this;
    }

    /**
     * Gets e911
     *
     * @return string|null
     */
    public function getE911()
    {
        return $this->container['e911'];
    }

    /**
     * Sets e911
     *
     * @param string|null $e911 ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setE911($e911)
    {
        if (is_null($e911)) {
            throw new \InvalidArgumentException('non-nullable e911 cannot be null');
        }
        $this->container['e911'] = $e911;

        return $this;
    }

    /**
     * Gets e911OrderId
     *
     * @return string|null
     */
    public function getE911OrderId()
    {
        return $this->container['e911OrderId'];
    }

    /**
     * Sets e911OrderId
     *
     * @param string|null $e911OrderId e911OrderId
     *
     * @return self
     */
    public function setE911OrderId($e911OrderId)
    {
        if (is_null($e911OrderId)) {
            throw new \InvalidArgumentException('non-nullable e911OrderId cannot be null');
        }
        if ((mb_strlen($e911OrderId) > 45)) {
            throw new \InvalidArgumentException('invalid length for $e911OrderId when calling GetNumber200Response., must be smaller than or equal to 45.');
        }
        if ((mb_strlen($e911OrderId) < 5)) {
            throw new \InvalidArgumentException('invalid length for $e911OrderId when calling GetNumber200Response., must be bigger than or equal to 5.');
        }

        $this->container['e911OrderId'] = $e911OrderId;

        return $this;
    }

    /**
     * Gets e911OrderDate
     *
     * @return \DateTime|null
     */
    public function getE911OrderDate()
    {
        return $this->container['e911OrderDate'];
    }

    /**
     * Sets e911OrderDate
     *
     * @param \DateTime|null $e911OrderDate e911OrderDate
     *
     * @return self
     */
    public function setE911OrderDate($e911OrderDate)
    {
        if (is_null($e911OrderDate)) {
            throw new \InvalidArgumentException('non-nullable e911OrderDate cannot be null');
        }
        $this->container['e911OrderDate'] = $e911OrderDate;

        return $this;
    }

    /**
     * Gets messageCampaign
     *
     * @return string|null
     */
    public function getMessageCampaign()
    {
        return $this->container['messageCampaign'];
    }

    /**
     * Sets messageCampaign
     *
     * @param string|null $messageCampaign ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setMessageCampaign($messageCampaign)
    {
        if (is_null($messageCampaign)) {
            throw new \InvalidArgumentException('non-nullable messageCampaign cannot be null');
        }
        if ((mb_strlen($messageCampaign) > 45)) {
            throw new \InvalidArgumentException('invalid length for $messageCampaign when calling GetNumber200Response., must be smaller than or equal to 45.');
        }

        $this->container['messageCampaign'] = $messageCampaign;

        return $this;
    }

    /**
     * Gets messageClass
     *
     * @return string|null
     */
    public function getMessageClass()
    {
        return $this->container['messageClass'];
    }

    /**
     * Sets messageClass
     *
     * @param string|null $messageClass messageClass
     *
     * @return self
     */
    public function setMessageClass($messageClass)
    {
        if (is_null($messageClass)) {
            throw new \InvalidArgumentException('non-nullable messageClass cannot be null');
        }
        $allowedValues = $this->getMessageClassAllowableValues();
        if (!in_array($messageClass, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'messageClass', must be one of '%s'",
                    $messageClass,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['messageClass'] = $messageClass;

        return $this;
    }

    /**
     * Gets messageType
     *
     * @return string|null
     */
    public function getMessageType()
    {
        return $this->container['messageType'];
    }

    /**
     * Sets messageType
     *
     * @param string|null $messageType messageType
     *
     * @return self
     */
    public function setMessageType($messageType)
    {
        if (is_null($messageType)) {
            throw new \InvalidArgumentException('non-nullable messageType cannot be null');
        }
        $allowedValues = $this->getMessageTypeAllowableValues();
        if (!in_array($messageType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'messageType', must be one of '%s'",
                    $messageType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['messageType'] = $messageType;

        return $this;
    }

    /**
     * Gets messageCampaignOrderId
     *
     * @return string|null
     */
    public function getMessageCampaignOrderId()
    {
        return $this->container['messageCampaignOrderId'];
    }

    /**
     * Sets messageCampaignOrderId
     *
     * @param string|null $messageCampaignOrderId messageCampaignOrderId
     *
     * @return self
     */
    public function setMessageCampaignOrderId($messageCampaignOrderId)
    {
        if (is_null($messageCampaignOrderId)) {
            throw new \InvalidArgumentException('non-nullable messageCampaignOrderId cannot be null');
        }
        if ((mb_strlen($messageCampaignOrderId) > 45)) {
            throw new \InvalidArgumentException('invalid length for $messageCampaignOrderId when calling GetNumber200Response., must be smaller than or equal to 45.');
        }

        $this->container['messageCampaignOrderId'] = $messageCampaignOrderId;

        return $this;
    }

    /**
     * Gets messageCampaignOrderDate
     *
     * @return \DateTime|null
     */
    public function getMessageCampaignOrderDate()
    {
        return $this->container['messageCampaignOrderDate'];
    }

    /**
     * Sets messageCampaignOrderDate
     *
     * @param \DateTime|null $messageCampaignOrderDate messageCampaignOrderDate
     *
     * @return self
     */
    public function setMessageCampaignOrderDate($messageCampaignOrderDate)
    {
        if (is_null($messageCampaignOrderDate)) {
            throw new \InvalidArgumentException('non-nullable messageCampaignOrderDate cannot be null');
        }
        $this->container['messageCampaignOrderDate'] = $messageCampaignOrderDate;

        return $this;
    }

    /**
     * Gets e911Supported
     *
     * @return int|null
     */
    public function getE911Supported()
    {
        return $this->container['e911Supported'];
    }

    /**
     * Sets e911Supported
     *
     * @param int|null $e911Supported e911Supported
     *
     * @return self
     */
    public function setE911Supported($e911Supported)
    {
        if (is_null($e911Supported)) {
            throw new \InvalidArgumentException('non-nullable e911Supported cannot be null');
        }
        $allowedValues = $this->getE911SupportedAllowableValues();
        if (!in_array($e911Supported, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'e911Supported', must be one of '%s'",
                    $e911Supported,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['e911Supported'] = $e911Supported;

        return $this;
    }

    /**
     * Gets callerNameSupported
     *
     * @return int|null
     */
    public function getCallerNameSupported()
    {
        return $this->container['callerNameSupported'];
    }

    /**
     * Sets callerNameSupported
     *
     * @param int|null $callerNameSupported callerNameSupported
     *
     * @return self
     */
    public function setCallerNameSupported($callerNameSupported)
    {
        if (is_null($callerNameSupported)) {
            throw new \InvalidArgumentException('non-nullable callerNameSupported cannot be null');
        }
        $allowedValues = $this->getCallerNameSupportedAllowableValues();
        if (!in_array($callerNameSupported, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'callerNameSupported', must be one of '%s'",
                    $callerNameSupported,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['callerNameSupported'] = $callerNameSupported;

        return $this;
    }

    /**
     * Gets directoryListingSupported
     *
     * @return int|null
     */
    public function getDirectoryListingSupported()
    {
        return $this->container['directoryListingSupported'];
    }

    /**
     * Sets directoryListingSupported
     *
     * @param int|null $directoryListingSupported directoryListingSupported
     *
     * @return self
     */
    public function setDirectoryListingSupported($directoryListingSupported)
    {
        if (is_null($directoryListingSupported)) {
            throw new \InvalidArgumentException('non-nullable directoryListingSupported cannot be null');
        }
        $allowedValues = $this->getDirectoryListingSupportedAllowableValues();
        if (!in_array($directoryListingSupported, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'directoryListingSupported', must be one of '%s'",
                    $directoryListingSupported,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['directoryListingSupported'] = $directoryListingSupported;

        return $this;
    }

    /**
     * Gets messagingSupported
     *
     * @return int|null
     */
    public function getMessagingSupported()
    {
        return $this->container['messagingSupported'];
    }

    /**
     * Sets messagingSupported
     *
     * @param int|null $messagingSupported messagingSupported
     *
     * @return self
     */
    public function setMessagingSupported($messagingSupported)
    {
        if (is_null($messagingSupported)) {
            throw new \InvalidArgumentException('non-nullable messagingSupported cannot be null');
        }
        $allowedValues = $this->getMessagingSupportedAllowableValues();
        if (!in_array($messagingSupported, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'messagingSupported', must be one of '%s'",
                    $messagingSupported,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['messagingSupported'] = $messagingSupported;

        return $this;
    }

    /**
     * Gets destinationType
     *
     * @return string
     */
    public function getDestinationType()
    {
        return $this->container['destinationType'];
    }

    /**
     * Sets destinationType
     *
     * @param string $destinationType destinationType
     *
     * @return self
     */
    public function setDestinationType($destinationType)
    {
        if (is_null($destinationType)) {
            throw new \InvalidArgumentException('non-nullable destinationType cannot be null');
        }
        $allowedValues = $this->getDestinationTypeAllowableValues();
        if (!in_array($destinationType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'destinationType', must be one of '%s'",
                    $destinationType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['destinationType'] = $destinationType;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return string|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param string|null $destination ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets ref
     *
     * @return string|null
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param string|null $ref ref
     *
     * @return self
     */
    public function setRef($ref)
    {
        if (is_null($ref)) {
            throw new \InvalidArgumentException('non-nullable ref cannot be null');
        }
        if ((mb_strlen($ref) > 100)) {
            throw new \InvalidArgumentException('invalid length for $ref when calling GetNumber200Response., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($ref) < 5)) {
            throw new \InvalidArgumentException('invalid length for $ref when calling GetNumber200Response., must be bigger than or equal to 5.');
        }

        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets callForwardingDestination
     *
     * @return string|null
     */
    public function getCallForwardingDestination()
    {
        return $this->container['callForwardingDestination'];
    }

    /**
     * Sets callForwardingDestination
     *
     * @param string|null $callForwardingDestination callForwardingDestination
     *
     * @return self
     */
    public function setCallForwardingDestination($callForwardingDestination)
    {
        if (is_null($callForwardingDestination)) {
            throw new \InvalidArgumentException('non-nullable callForwardingDestination cannot be null');
        }
        if ((mb_strlen($callForwardingDestination) > 45)) {
            throw new \InvalidArgumentException('invalid length for $callForwardingDestination when calling GetNumber200Response., must be smaller than or equal to 45.');
        }
        if ((mb_strlen($callForwardingDestination) < 10)) {
            throw new \InvalidArgumentException('invalid length for $callForwardingDestination when calling GetNumber200Response., must be bigger than or equal to 10.');
        }

        $this->container['callForwardingDestination'] = $callForwardingDestination;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets createdByUserId
     *
     * @return string|null
     */
    public function getCreatedByUserId()
    {
        return $this->container['createdByUserId'];
    }

    /**
     * Sets createdByUserId
     *
     * @param string|null $createdByUserId ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setCreatedByUserId($createdByUserId)
    {
        if (is_null($createdByUserId)) {
            throw new \InvalidArgumentException('non-nullable createdByUserId cannot be null');
        }
        $this->container['createdByUserId'] = $createdByUserId;

        return $this;
    }

    /**
     * Gets updatedByUserId
     *
     * @return string|null
     */
    public function getUpdatedByUserId()
    {
        return $this->container['updatedByUserId'];
    }

    /**
     * Sets updatedByUserId
     *
     * @param string|null $updatedByUserId ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setUpdatedByUserId($updatedByUserId)
    {
        if (is_null($updatedByUserId)) {
            throw new \InvalidArgumentException('non-nullable updatedByUserId cannot be null');
        }
        $this->container['updatedByUserId'] = $updatedByUserId;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


