<?php
/**
 * GetCustomer200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.18
 * Contact: support@circuitid.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\CircuitID;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetCustomer200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetCustomer200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getCustomer_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'status' => 'string',
        'websiteUrl' => 'string',
        'logo' => 'string',
        'credit' => 'int',
        'adminUserId' => 'string',
        'billingUserId' => 'string',
        'callRecordingUserId' => 'string',
        'callForwardingCallLimit' => 'int',
        'supportUserId' => 'string',
        'automaticRefillAmount' => 'int',
        'lowBalanceAlertAmount' => 'int',
        'lowBalanceAlertAt' => '\DateTime',
        'lowBalanceAlertCount' => 'int',
        'lastAutomaticRefillInvoice' => 'string',
        'internationalCalling' => 'int',
        'createdByIP' => 'string',
        'callDebug' => 'int',
        'mediaBypass' => 'int',
        'accountLock' => 'int',
        'callRecording' => 'int',
        'cdrRetention' => 'int',
        'cnamLookUps' => 'int',
        'holdMusic' => 'int',
        'transcribeCalls' => 'int',
        'maxOutboundCallRate' => 'int',
        'defaultBillMethod' => 'string',
        'createdByUserId' => 'string',
        'updatedByUserId' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'status' => null,
        'websiteUrl' => null,
        'logo' => null,
        'credit' => 'int32',
        'adminUserId' => null,
        'billingUserId' => null,
        'callRecordingUserId' => null,
        'callForwardingCallLimit' => 'int32',
        'supportUserId' => null,
        'automaticRefillAmount' => 'int32',
        'lowBalanceAlertAmount' => 'int32',
        'lowBalanceAlertAt' => 'date-time',
        'lowBalanceAlertCount' => 'int32',
        'lastAutomaticRefillInvoice' => null,
        'internationalCalling' => 'int32',
        'createdByIP' => null,
        'callDebug' => 'int32',
        'mediaBypass' => 'int32',
        'accountLock' => 'int32',
        'callRecording' => 'int32',
        'cdrRetention' => 'int32',
        'cnamLookUps' => 'int32',
        'holdMusic' => 'int32',
        'transcribeCalls' => 'int32',
        'maxOutboundCallRate' => 'int32',
        'defaultBillMethod' => null,
        'createdByUserId' => null,
        'updatedByUserId' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'status' => false,
		'websiteUrl' => false,
		'logo' => false,
		'credit' => false,
		'adminUserId' => false,
		'billingUserId' => false,
		'callRecordingUserId' => false,
		'callForwardingCallLimit' => false,
		'supportUserId' => false,
		'automaticRefillAmount' => false,
		'lowBalanceAlertAmount' => false,
		'lowBalanceAlertAt' => false,
		'lowBalanceAlertCount' => false,
		'lastAutomaticRefillInvoice' => false,
		'internationalCalling' => false,
		'createdByIP' => false,
		'callDebug' => false,
		'mediaBypass' => false,
		'accountLock' => false,
		'callRecording' => false,
		'cdrRetention' => false,
		'cnamLookUps' => false,
		'holdMusic' => false,
		'transcribeCalls' => false,
		'maxOutboundCallRate' => false,
		'defaultBillMethod' => false,
		'createdByUserId' => false,
		'updatedByUserId' => false,
		'createdAt' => false,
		'updatedAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'status' => 'status',
        'websiteUrl' => 'websiteUrl',
        'logo' => 'logo',
        'credit' => 'credit',
        'adminUserId' => 'adminUserId',
        'billingUserId' => 'billingUserId',
        'callRecordingUserId' => 'callRecordingUserId',
        'callForwardingCallLimit' => 'callForwardingCallLimit',
        'supportUserId' => 'supportUserId',
        'automaticRefillAmount' => 'automaticRefillAmount',
        'lowBalanceAlertAmount' => 'lowBalanceAlertAmount',
        'lowBalanceAlertAt' => 'lowBalanceAlertAt',
        'lowBalanceAlertCount' => 'lowBalanceAlertCount',
        'lastAutomaticRefillInvoice' => 'lastAutomaticRefillInvoice',
        'internationalCalling' => 'internationalCalling',
        'createdByIP' => 'createdByIP',
        'callDebug' => 'callDebug',
        'mediaBypass' => 'mediaBypass',
        'accountLock' => 'accountLock',
        'callRecording' => 'callRecording',
        'cdrRetention' => 'cdrRetention',
        'cnamLookUps' => 'cnamLookUps',
        'holdMusic' => 'holdMusic',
        'transcribeCalls' => 'transcribeCalls',
        'maxOutboundCallRate' => 'maxOutboundCallRate',
        'defaultBillMethod' => 'defaultBillMethod',
        'createdByUserId' => 'createdByUserId',
        'updatedByUserId' => 'updatedByUserId',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'status' => 'setStatus',
        'websiteUrl' => 'setWebsiteUrl',
        'logo' => 'setLogo',
        'credit' => 'setCredit',
        'adminUserId' => 'setAdminUserId',
        'billingUserId' => 'setBillingUserId',
        'callRecordingUserId' => 'setCallRecordingUserId',
        'callForwardingCallLimit' => 'setCallForwardingCallLimit',
        'supportUserId' => 'setSupportUserId',
        'automaticRefillAmount' => 'setAutomaticRefillAmount',
        'lowBalanceAlertAmount' => 'setLowBalanceAlertAmount',
        'lowBalanceAlertAt' => 'setLowBalanceAlertAt',
        'lowBalanceAlertCount' => 'setLowBalanceAlertCount',
        'lastAutomaticRefillInvoice' => 'setLastAutomaticRefillInvoice',
        'internationalCalling' => 'setInternationalCalling',
        'createdByIP' => 'setCreatedByIP',
        'callDebug' => 'setCallDebug',
        'mediaBypass' => 'setMediaBypass',
        'accountLock' => 'setAccountLock',
        'callRecording' => 'setCallRecording',
        'cdrRetention' => 'setCdrRetention',
        'cnamLookUps' => 'setCnamLookUps',
        'holdMusic' => 'setHoldMusic',
        'transcribeCalls' => 'setTranscribeCalls',
        'maxOutboundCallRate' => 'setMaxOutboundCallRate',
        'defaultBillMethod' => 'setDefaultBillMethod',
        'createdByUserId' => 'setCreatedByUserId',
        'updatedByUserId' => 'setUpdatedByUserId',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'status' => 'getStatus',
        'websiteUrl' => 'getWebsiteUrl',
        'logo' => 'getLogo',
        'credit' => 'getCredit',
        'adminUserId' => 'getAdminUserId',
        'billingUserId' => 'getBillingUserId',
        'callRecordingUserId' => 'getCallRecordingUserId',
        'callForwardingCallLimit' => 'getCallForwardingCallLimit',
        'supportUserId' => 'getSupportUserId',
        'automaticRefillAmount' => 'getAutomaticRefillAmount',
        'lowBalanceAlertAmount' => 'getLowBalanceAlertAmount',
        'lowBalanceAlertAt' => 'getLowBalanceAlertAt',
        'lowBalanceAlertCount' => 'getLowBalanceAlertCount',
        'lastAutomaticRefillInvoice' => 'getLastAutomaticRefillInvoice',
        'internationalCalling' => 'getInternationalCalling',
        'createdByIP' => 'getCreatedByIP',
        'callDebug' => 'getCallDebug',
        'mediaBypass' => 'getMediaBypass',
        'accountLock' => 'getAccountLock',
        'callRecording' => 'getCallRecording',
        'cdrRetention' => 'getCdrRetention',
        'cnamLookUps' => 'getCnamLookUps',
        'holdMusic' => 'getHoldMusic',
        'transcribeCalls' => 'getTranscribeCalls',
        'maxOutboundCallRate' => 'getMaxOutboundCallRate',
        'defaultBillMethod' => 'getDefaultBillMethod',
        'createdByUserId' => 'getCreatedByUserId',
        'updatedByUserId' => 'getUpdatedByUserId',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_ACTIVE = 'active';
    public const STATUS_SUSPENDED = 'suspended';
    public const STATUS_TERMINATED = 'terminated';
    public const STATUS_FRAUD = 'fraud';
    public const INTERNATIONAL_CALLING_1 = 1;
    public const INTERNATIONAL_CALLING_0 = 0;
    public const CALL_DEBUG_1 = 1;
    public const CALL_DEBUG_0 = 0;
    public const MEDIA_BYPASS_1 = 1;
    public const MEDIA_BYPASS_0 = 0;
    public const ACCOUNT_LOCK_1 = 1;
    public const ACCOUNT_LOCK_0 = 0;
    public const CALL_RECORDING_1 = 1;
    public const CALL_RECORDING_0 = 0;
    public const CNAM_LOOK_UPS_1 = 1;
    public const CNAM_LOOK_UPS_0 = 0;
    public const HOLD_MUSIC_1 = 1;
    public const HOLD_MUSIC_0 = 0;
    public const TRANSCRIBE_CALLS_1 = 1;
    public const TRANSCRIBE_CALLS_0 = 0;
    public const DEFAULT_BILL_METHOD_CREDIT = 'credit';
    public const DEFAULT_BILL_METHOD_PAYMENTMETHOD = 'paymentmethod';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_SUSPENDED,
            self::STATUS_TERMINATED,
            self::STATUS_FRAUD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInternationalCallingAllowableValues()
    {
        return [
            self::INTERNATIONAL_CALLING_1,
            self::INTERNATIONAL_CALLING_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCallDebugAllowableValues()
    {
        return [
            self::CALL_DEBUG_1,
            self::CALL_DEBUG_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMediaBypassAllowableValues()
    {
        return [
            self::MEDIA_BYPASS_1,
            self::MEDIA_BYPASS_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountLockAllowableValues()
    {
        return [
            self::ACCOUNT_LOCK_1,
            self::ACCOUNT_LOCK_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCallRecordingAllowableValues()
    {
        return [
            self::CALL_RECORDING_1,
            self::CALL_RECORDING_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCnamLookUpsAllowableValues()
    {
        return [
            self::CNAM_LOOK_UPS_1,
            self::CNAM_LOOK_UPS_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHoldMusicAllowableValues()
    {
        return [
            self::HOLD_MUSIC_1,
            self::HOLD_MUSIC_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTranscribeCallsAllowableValues()
    {
        return [
            self::TRANSCRIBE_CALLS_1,
            self::TRANSCRIBE_CALLS_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultBillMethodAllowableValues()
    {
        return [
            self::DEFAULT_BILL_METHOD_CREDIT,
            self::DEFAULT_BILL_METHOD_PAYMENTMETHOD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], 'active');
        $this->setIfExists('websiteUrl', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('credit', $data ?? [], 0);
        $this->setIfExists('adminUserId', $data ?? [], null);
        $this->setIfExists('billingUserId', $data ?? [], null);
        $this->setIfExists('callRecordingUserId', $data ?? [], null);
        $this->setIfExists('callForwardingCallLimit', $data ?? [], 10);
        $this->setIfExists('supportUserId', $data ?? [], null);
        $this->setIfExists('automaticRefillAmount', $data ?? [], 0);
        $this->setIfExists('lowBalanceAlertAmount', $data ?? [], 0);
        $this->setIfExists('lowBalanceAlertAt', $data ?? [], null);
        $this->setIfExists('lowBalanceAlertCount', $data ?? [], 0);
        $this->setIfExists('lastAutomaticRefillInvoice', $data ?? [], null);
        $this->setIfExists('internationalCalling', $data ?? [], self::INTERNATIONAL_CALLING_0);
        $this->setIfExists('createdByIP', $data ?? [], null);
        $this->setIfExists('callDebug', $data ?? [], self::CALL_DEBUG_0);
        $this->setIfExists('mediaBypass', $data ?? [], self::MEDIA_BYPASS_0);
        $this->setIfExists('accountLock', $data ?? [], self::ACCOUNT_LOCK_1);
        $this->setIfExists('callRecording', $data ?? [], self::CALL_RECORDING_0);
        $this->setIfExists('cdrRetention', $data ?? [], 12);
        $this->setIfExists('cnamLookUps', $data ?? [], self::CNAM_LOOK_UPS_0);
        $this->setIfExists('holdMusic', $data ?? [], self::HOLD_MUSIC_0);
        $this->setIfExists('transcribeCalls', $data ?? [], null);
        $this->setIfExists('maxOutboundCallRate', $data ?? [], 1);
        $this->setIfExists('defaultBillMethod', $data ?? [], 'credit');
        $this->setIfExists('createdByUserId', $data ?? [], null);
        $this->setIfExists('updatedByUserId', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 45)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 45.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['websiteUrl']) && (mb_strlen($this->container['websiteUrl']) > 255)) {
            $invalidProperties[] = "invalid value for 'websiteUrl', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['logo']) && (mb_strlen($this->container['logo']) > 255)) {
            $invalidProperties[] = "invalid value for 'logo', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getInternationalCallingAllowableValues();
        if (!is_null($this->container['internationalCalling']) && !in_array($this->container['internationalCalling'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'internationalCalling', must be one of '%s'",
                $this->container['internationalCalling'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['createdByIP']) && (mb_strlen($this->container['createdByIP']) > 45)) {
            $invalidProperties[] = "invalid value for 'createdByIP', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['createdByIP']) && (mb_strlen($this->container['createdByIP']) < 8)) {
            $invalidProperties[] = "invalid value for 'createdByIP', the character length must be bigger than or equal to 8.";
        }

        $allowedValues = $this->getCallDebugAllowableValues();
        if (!is_null($this->container['callDebug']) && !in_array($this->container['callDebug'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'callDebug', must be one of '%s'",
                $this->container['callDebug'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMediaBypassAllowableValues();
        if (!is_null($this->container['mediaBypass']) && !in_array($this->container['mediaBypass'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mediaBypass', must be one of '%s'",
                $this->container['mediaBypass'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountLockAllowableValues();
        if (!is_null($this->container['accountLock']) && !in_array($this->container['accountLock'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'accountLock', must be one of '%s'",
                $this->container['accountLock'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCallRecordingAllowableValues();
        if (!is_null($this->container['callRecording']) && !in_array($this->container['callRecording'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'callRecording', must be one of '%s'",
                $this->container['callRecording'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCnamLookUpsAllowableValues();
        if (!is_null($this->container['cnamLookUps']) && !in_array($this->container['cnamLookUps'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cnamLookUps', must be one of '%s'",
                $this->container['cnamLookUps'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHoldMusicAllowableValues();
        if (!is_null($this->container['holdMusic']) && !in_array($this->container['holdMusic'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'holdMusic', must be one of '%s'",
                $this->container['holdMusic'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTranscribeCallsAllowableValues();
        if (!is_null($this->container['transcribeCalls']) && !in_array($this->container['transcribeCalls'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transcribeCalls', must be one of '%s'",
                $this->container['transcribeCalls'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['defaultBillMethod'] === null) {
            $invalidProperties[] = "'defaultBillMethod' can't be null";
        }
        $allowedValues = $this->getDefaultBillMethodAllowableValues();
        if (!is_null($this->container['defaultBillMethod']) && !in_array($this->container['defaultBillMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'defaultBillMethod', must be one of '%s'",
                $this->container['defaultBillMethod'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 45)) {
            throw new \InvalidArgumentException('invalid length for $name when calling GetCustomer200Response., must be smaller than or equal to 45.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets websiteUrl
     *
     * @return string|null
     */
    public function getWebsiteUrl()
    {
        return $this->container['websiteUrl'];
    }

    /**
     * Sets websiteUrl
     *
     * @param string|null $websiteUrl websiteUrl
     *
     * @return self
     */
    public function setWebsiteUrl($websiteUrl)
    {
        if (is_null($websiteUrl)) {
            throw new \InvalidArgumentException('non-nullable websiteUrl cannot be null');
        }
        if ((mb_strlen($websiteUrl) > 255)) {
            throw new \InvalidArgumentException('invalid length for $websiteUrl when calling GetCustomer200Response., must be smaller than or equal to 255.');
        }

        $this->container['websiteUrl'] = $websiteUrl;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo logo
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            throw new \InvalidArgumentException('non-nullable logo cannot be null');
        }
        if ((mb_strlen($logo) > 255)) {
            throw new \InvalidArgumentException('invalid length for $logo when calling GetCustomer200Response., must be smaller than or equal to 255.');
        }

        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets credit
     *
     * @return int|null
     */
    public function getCredit()
    {
        return $this->container['credit'];
    }

    /**
     * Sets credit
     *
     * @param int|null $credit credit
     *
     * @return self
     */
    public function setCredit($credit)
    {
        if (is_null($credit)) {
            throw new \InvalidArgumentException('non-nullable credit cannot be null');
        }
        $this->container['credit'] = $credit;

        return $this;
    }

    /**
     * Gets adminUserId
     *
     * @return string|null
     */
    public function getAdminUserId()
    {
        return $this->container['adminUserId'];
    }

    /**
     * Sets adminUserId
     *
     * @param string|null $adminUserId ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setAdminUserId($adminUserId)
    {
        if (is_null($adminUserId)) {
            throw new \InvalidArgumentException('non-nullable adminUserId cannot be null');
        }
        $this->container['adminUserId'] = $adminUserId;

        return $this;
    }

    /**
     * Gets billingUserId
     *
     * @return string|null
     */
    public function getBillingUserId()
    {
        return $this->container['billingUserId'];
    }

    /**
     * Sets billingUserId
     *
     * @param string|null $billingUserId ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setBillingUserId($billingUserId)
    {
        if (is_null($billingUserId)) {
            throw new \InvalidArgumentException('non-nullable billingUserId cannot be null');
        }
        $this->container['billingUserId'] = $billingUserId;

        return $this;
    }

    /**
     * Gets callRecordingUserId
     *
     * @return string|null
     */
    public function getCallRecordingUserId()
    {
        return $this->container['callRecordingUserId'];
    }

    /**
     * Sets callRecordingUserId
     *
     * @param string|null $callRecordingUserId ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setCallRecordingUserId($callRecordingUserId)
    {
        if (is_null($callRecordingUserId)) {
            throw new \InvalidArgumentException('non-nullable callRecordingUserId cannot be null');
        }
        $this->container['callRecordingUserId'] = $callRecordingUserId;

        return $this;
    }

    /**
     * Gets callForwardingCallLimit
     *
     * @return int|null
     */
    public function getCallForwardingCallLimit()
    {
        return $this->container['callForwardingCallLimit'];
    }

    /**
     * Sets callForwardingCallLimit
     *
     * @param int|null $callForwardingCallLimit callForwardingCallLimit
     *
     * @return self
     */
    public function setCallForwardingCallLimit($callForwardingCallLimit)
    {
        if (is_null($callForwardingCallLimit)) {
            throw new \InvalidArgumentException('non-nullable callForwardingCallLimit cannot be null');
        }
        $this->container['callForwardingCallLimit'] = $callForwardingCallLimit;

        return $this;
    }

    /**
     * Gets supportUserId
     *
     * @return string|null
     */
    public function getSupportUserId()
    {
        return $this->container['supportUserId'];
    }

    /**
     * Sets supportUserId
     *
     * @param string|null $supportUserId ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setSupportUserId($supportUserId)
    {
        if (is_null($supportUserId)) {
            throw new \InvalidArgumentException('non-nullable supportUserId cannot be null');
        }
        $this->container['supportUserId'] = $supportUserId;

        return $this;
    }

    /**
     * Gets automaticRefillAmount
     *
     * @return int|null
     */
    public function getAutomaticRefillAmount()
    {
        return $this->container['automaticRefillAmount'];
    }

    /**
     * Sets automaticRefillAmount
     *
     * @param int|null $automaticRefillAmount automaticRefillAmount
     *
     * @return self
     */
    public function setAutomaticRefillAmount($automaticRefillAmount)
    {
        if (is_null($automaticRefillAmount)) {
            throw new \InvalidArgumentException('non-nullable automaticRefillAmount cannot be null');
        }
        $this->container['automaticRefillAmount'] = $automaticRefillAmount;

        return $this;
    }

    /**
     * Gets lowBalanceAlertAmount
     *
     * @return int|null
     */
    public function getLowBalanceAlertAmount()
    {
        return $this->container['lowBalanceAlertAmount'];
    }

    /**
     * Sets lowBalanceAlertAmount
     *
     * @param int|null $lowBalanceAlertAmount lowBalanceAlertAmount
     *
     * @return self
     */
    public function setLowBalanceAlertAmount($lowBalanceAlertAmount)
    {
        if (is_null($lowBalanceAlertAmount)) {
            throw new \InvalidArgumentException('non-nullable lowBalanceAlertAmount cannot be null');
        }
        $this->container['lowBalanceAlertAmount'] = $lowBalanceAlertAmount;

        return $this;
    }

    /**
     * Gets lowBalanceAlertAt
     *
     * @return \DateTime|null
     */
    public function getLowBalanceAlertAt()
    {
        return $this->container['lowBalanceAlertAt'];
    }

    /**
     * Sets lowBalanceAlertAt
     *
     * @param \DateTime|null $lowBalanceAlertAt lowBalanceAlertAt
     *
     * @return self
     */
    public function setLowBalanceAlertAt($lowBalanceAlertAt)
    {
        if (is_null($lowBalanceAlertAt)) {
            throw new \InvalidArgumentException('non-nullable lowBalanceAlertAt cannot be null');
        }
        $this->container['lowBalanceAlertAt'] = $lowBalanceAlertAt;

        return $this;
    }

    /**
     * Gets lowBalanceAlertCount
     *
     * @return int|null
     */
    public function getLowBalanceAlertCount()
    {
        return $this->container['lowBalanceAlertCount'];
    }

    /**
     * Sets lowBalanceAlertCount
     *
     * @param int|null $lowBalanceAlertCount lowBalanceAlertCount
     *
     * @return self
     */
    public function setLowBalanceAlertCount($lowBalanceAlertCount)
    {
        if (is_null($lowBalanceAlertCount)) {
            throw new \InvalidArgumentException('non-nullable lowBalanceAlertCount cannot be null');
        }
        $this->container['lowBalanceAlertCount'] = $lowBalanceAlertCount;

        return $this;
    }

    /**
     * Gets lastAutomaticRefillInvoice
     *
     * @return string|null
     */
    public function getLastAutomaticRefillInvoice()
    {
        return $this->container['lastAutomaticRefillInvoice'];
    }

    /**
     * Sets lastAutomaticRefillInvoice
     *
     * @param string|null $lastAutomaticRefillInvoice ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setLastAutomaticRefillInvoice($lastAutomaticRefillInvoice)
    {
        if (is_null($lastAutomaticRefillInvoice)) {
            throw new \InvalidArgumentException('non-nullable lastAutomaticRefillInvoice cannot be null');
        }
        $this->container['lastAutomaticRefillInvoice'] = $lastAutomaticRefillInvoice;

        return $this;
    }

    /**
     * Gets internationalCalling
     *
     * @return int|null
     */
    public function getInternationalCalling()
    {
        return $this->container['internationalCalling'];
    }

    /**
     * Sets internationalCalling
     *
     * @param int|null $internationalCalling internationalCalling
     *
     * @return self
     */
    public function setInternationalCalling($internationalCalling)
    {
        if (is_null($internationalCalling)) {
            throw new \InvalidArgumentException('non-nullable internationalCalling cannot be null');
        }
        $allowedValues = $this->getInternationalCallingAllowableValues();
        if (!in_array($internationalCalling, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'internationalCalling', must be one of '%s'",
                    $internationalCalling,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['internationalCalling'] = $internationalCalling;

        return $this;
    }

    /**
     * Gets createdByIP
     *
     * @return string|null
     */
    public function getCreatedByIP()
    {
        return $this->container['createdByIP'];
    }

    /**
     * Sets createdByIP
     *
     * @param string|null $createdByIP createdByIP
     *
     * @return self
     */
    public function setCreatedByIP($createdByIP)
    {
        if (is_null($createdByIP)) {
            throw new \InvalidArgumentException('non-nullable createdByIP cannot be null');
        }
        if ((mb_strlen($createdByIP) > 45)) {
            throw new \InvalidArgumentException('invalid length for $createdByIP when calling GetCustomer200Response., must be smaller than or equal to 45.');
        }
        if ((mb_strlen($createdByIP) < 8)) {
            throw new \InvalidArgumentException('invalid length for $createdByIP when calling GetCustomer200Response., must be bigger than or equal to 8.');
        }

        $this->container['createdByIP'] = $createdByIP;

        return $this;
    }

    /**
     * Gets callDebug
     *
     * @return int|null
     */
    public function getCallDebug()
    {
        return $this->container['callDebug'];
    }

    /**
     * Sets callDebug
     *
     * @param int|null $callDebug callDebug
     *
     * @return self
     */
    public function setCallDebug($callDebug)
    {
        if (is_null($callDebug)) {
            throw new \InvalidArgumentException('non-nullable callDebug cannot be null');
        }
        $allowedValues = $this->getCallDebugAllowableValues();
        if (!in_array($callDebug, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'callDebug', must be one of '%s'",
                    $callDebug,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['callDebug'] = $callDebug;

        return $this;
    }

    /**
     * Gets mediaBypass
     *
     * @return int|null
     */
    public function getMediaBypass()
    {
        return $this->container['mediaBypass'];
    }

    /**
     * Sets mediaBypass
     *
     * @param int|null $mediaBypass mediaBypass
     *
     * @return self
     */
    public function setMediaBypass($mediaBypass)
    {
        if (is_null($mediaBypass)) {
            throw new \InvalidArgumentException('non-nullable mediaBypass cannot be null');
        }
        $allowedValues = $this->getMediaBypassAllowableValues();
        if (!in_array($mediaBypass, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mediaBypass', must be one of '%s'",
                    $mediaBypass,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mediaBypass'] = $mediaBypass;

        return $this;
    }

    /**
     * Gets accountLock
     *
     * @return int|null
     */
    public function getAccountLock()
    {
        return $this->container['accountLock'];
    }

    /**
     * Sets accountLock
     *
     * @param int|null $accountLock accountLock
     *
     * @return self
     */
    public function setAccountLock($accountLock)
    {
        if (is_null($accountLock)) {
            throw new \InvalidArgumentException('non-nullable accountLock cannot be null');
        }
        $allowedValues = $this->getAccountLockAllowableValues();
        if (!in_array($accountLock, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'accountLock', must be one of '%s'",
                    $accountLock,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accountLock'] = $accountLock;

        return $this;
    }

    /**
     * Gets callRecording
     *
     * @return int|null
     */
    public function getCallRecording()
    {
        return $this->container['callRecording'];
    }

    /**
     * Sets callRecording
     *
     * @param int|null $callRecording callRecording
     *
     * @return self
     */
    public function setCallRecording($callRecording)
    {
        if (is_null($callRecording)) {
            throw new \InvalidArgumentException('non-nullable callRecording cannot be null');
        }
        $allowedValues = $this->getCallRecordingAllowableValues();
        if (!in_array($callRecording, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'callRecording', must be one of '%s'",
                    $callRecording,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['callRecording'] = $callRecording;

        return $this;
    }

    /**
     * Gets cdrRetention
     *
     * @return int|null
     */
    public function getCdrRetention()
    {
        return $this->container['cdrRetention'];
    }

    /**
     * Sets cdrRetention
     *
     * @param int|null $cdrRetention cdrRetention
     *
     * @return self
     */
    public function setCdrRetention($cdrRetention)
    {
        if (is_null($cdrRetention)) {
            throw new \InvalidArgumentException('non-nullable cdrRetention cannot be null');
        }
        $this->container['cdrRetention'] = $cdrRetention;

        return $this;
    }

    /**
     * Gets cnamLookUps
     *
     * @return int|null
     */
    public function getCnamLookUps()
    {
        return $this->container['cnamLookUps'];
    }

    /**
     * Sets cnamLookUps
     *
     * @param int|null $cnamLookUps cnamLookUps
     *
     * @return self
     */
    public function setCnamLookUps($cnamLookUps)
    {
        if (is_null($cnamLookUps)) {
            throw new \InvalidArgumentException('non-nullable cnamLookUps cannot be null');
        }
        $allowedValues = $this->getCnamLookUpsAllowableValues();
        if (!in_array($cnamLookUps, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cnamLookUps', must be one of '%s'",
                    $cnamLookUps,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cnamLookUps'] = $cnamLookUps;

        return $this;
    }

    /**
     * Gets holdMusic
     *
     * @return int|null
     */
    public function getHoldMusic()
    {
        return $this->container['holdMusic'];
    }

    /**
     * Sets holdMusic
     *
     * @param int|null $holdMusic holdMusic
     *
     * @return self
     */
    public function setHoldMusic($holdMusic)
    {
        if (is_null($holdMusic)) {
            throw new \InvalidArgumentException('non-nullable holdMusic cannot be null');
        }
        $allowedValues = $this->getHoldMusicAllowableValues();
        if (!in_array($holdMusic, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'holdMusic', must be one of '%s'",
                    $holdMusic,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['holdMusic'] = $holdMusic;

        return $this;
    }

    /**
     * Gets transcribeCalls
     *
     * @return int|null
     */
    public function getTranscribeCalls()
    {
        return $this->container['transcribeCalls'];
    }

    /**
     * Sets transcribeCalls
     *
     * @param int|null $transcribeCalls transcribeCalls
     *
     * @return self
     */
    public function setTranscribeCalls($transcribeCalls)
    {
        if (is_null($transcribeCalls)) {
            throw new \InvalidArgumentException('non-nullable transcribeCalls cannot be null');
        }
        $allowedValues = $this->getTranscribeCallsAllowableValues();
        if (!in_array($transcribeCalls, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transcribeCalls', must be one of '%s'",
                    $transcribeCalls,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transcribeCalls'] = $transcribeCalls;

        return $this;
    }

    /**
     * Gets maxOutboundCallRate
     *
     * @return int|null
     */
    public function getMaxOutboundCallRate()
    {
        return $this->container['maxOutboundCallRate'];
    }

    /**
     * Sets maxOutboundCallRate
     *
     * @param int|null $maxOutboundCallRate maxOutboundCallRate
     *
     * @return self
     */
    public function setMaxOutboundCallRate($maxOutboundCallRate)
    {
        if (is_null($maxOutboundCallRate)) {
            throw new \InvalidArgumentException('non-nullable maxOutboundCallRate cannot be null');
        }
        $this->container['maxOutboundCallRate'] = $maxOutboundCallRate;

        return $this;
    }

    /**
     * Gets defaultBillMethod
     *
     * @return string
     */
    public function getDefaultBillMethod()
    {
        return $this->container['defaultBillMethod'];
    }

    /**
     * Sets defaultBillMethod
     *
     * @param string $defaultBillMethod defaultBillMethod
     *
     * @return self
     */
    public function setDefaultBillMethod($defaultBillMethod)
    {
        if (is_null($defaultBillMethod)) {
            throw new \InvalidArgumentException('non-nullable defaultBillMethod cannot be null');
        }
        $allowedValues = $this->getDefaultBillMethodAllowableValues();
        if (!in_array($defaultBillMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'defaultBillMethod', must be one of '%s'",
                    $defaultBillMethod,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['defaultBillMethod'] = $defaultBillMethod;

        return $this;
    }

    /**
     * Gets createdByUserId
     *
     * @return string|null
     */
    public function getCreatedByUserId()
    {
        return $this->container['createdByUserId'];
    }

    /**
     * Sets createdByUserId
     *
     * @param string|null $createdByUserId ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setCreatedByUserId($createdByUserId)
    {
        if (is_null($createdByUserId)) {
            throw new \InvalidArgumentException('non-nullable createdByUserId cannot be null');
        }
        $this->container['createdByUserId'] = $createdByUserId;

        return $this;
    }

    /**
     * Gets updatedByUserId
     *
     * @return string|null
     */
    public function getUpdatedByUserId()
    {
        return $this->container['updatedByUserId'];
    }

    /**
     * Sets updatedByUserId
     *
     * @param string|null $updatedByUserId ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setUpdatedByUserId($updatedByUserId)
    {
        if (is_null($updatedByUserId)) {
            throw new \InvalidArgumentException('non-nullable updatedByUserId cannot be null');
        }
        $this->container['updatedByUserId'] = $updatedByUserId;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


