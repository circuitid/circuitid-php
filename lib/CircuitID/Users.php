<?php
/**
 * Users
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.20
 * Contact: support@circuitid.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\CircuitID;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Users Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Users implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'users';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'string',
        'password' => 'string',
        'sipPassword' => 'string',
        'turnPassword' => 'string',
        'first' => 'string',
        'last' => 'string',
        'mobilePhone' => 'string',
        'businessPhone' => 'string',
        'extension' => 'int',
        'customCallerId' => 'int',
        'jobTitle' => 'string',
        'department' => 'string',
        'office' => 'string',
        'avatar' => 'string',
        'language' => 'string',
        'isPrimary' => 'int',
        'status' => 'string',
        'vmGreetingType' => 'string',
        'vmTimeout' => 'int',
        'vmFile' => 'string',
        'vmPlaybackNumber' => 'string',
        'pin' => 'int',
        'number' => 'string',
        'region' => 'string',
        'callerIdNumber' => 'string',
        'adminPermission' => 'string',
        'billingPermission' => 'string',
        'phonePermission' => 'string',
        'agilePermission' => 'string',
        'jobServerPermission' => 'string',
        'mediaServerPermission' => 'string',
        'mailServerPermission' => 'string',
        'superAdminPermission' => 'string',
        'timezone' => 'string',
        'vmTranscription' => 'int',
        'communication' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email' => null,
        'password' => null,
        'sipPassword' => null,
        'turnPassword' => null,
        'first' => null,
        'last' => null,
        'mobilePhone' => null,
        'businessPhone' => null,
        'extension' => 'int32',
        'customCallerId' => 'int32',
        'jobTitle' => null,
        'department' => null,
        'office' => null,
        'avatar' => null,
        'language' => null,
        'isPrimary' => 'int32',
        'status' => null,
        'vmGreetingType' => null,
        'vmTimeout' => 'int32',
        'vmFile' => null,
        'vmPlaybackNumber' => null,
        'pin' => 'int32',
        'number' => null,
        'region' => null,
        'callerIdNumber' => null,
        'adminPermission' => null,
        'billingPermission' => null,
        'phonePermission' => null,
        'agilePermission' => null,
        'jobServerPermission' => null,
        'mediaServerPermission' => null,
        'mailServerPermission' => null,
        'superAdminPermission' => null,
        'timezone' => null,
        'vmTranscription' => 'int32',
        'communication' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'email' => false,
		'password' => false,
		'sipPassword' => false,
		'turnPassword' => false,
		'first' => false,
		'last' => false,
		'mobilePhone' => false,
		'businessPhone' => false,
		'extension' => false,
		'customCallerId' => false,
		'jobTitle' => false,
		'department' => false,
		'office' => false,
		'avatar' => false,
		'language' => false,
		'isPrimary' => false,
		'status' => false,
		'vmGreetingType' => false,
		'vmTimeout' => false,
		'vmFile' => false,
		'vmPlaybackNumber' => false,
		'pin' => false,
		'number' => false,
		'region' => false,
		'callerIdNumber' => false,
		'adminPermission' => true,
		'billingPermission' => true,
		'phonePermission' => true,
		'agilePermission' => true,
		'jobServerPermission' => true,
		'mediaServerPermission' => true,
		'mailServerPermission' => true,
		'superAdminPermission' => true,
		'timezone' => false,
		'vmTranscription' => false,
		'communication' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'password' => 'password',
        'sipPassword' => 'sipPassword',
        'turnPassword' => 'turnPassword',
        'first' => 'first',
        'last' => 'last',
        'mobilePhone' => 'mobilePhone',
        'businessPhone' => 'businessPhone',
        'extension' => 'extension',
        'customCallerId' => 'customCallerId',
        'jobTitle' => 'jobTitle',
        'department' => 'department',
        'office' => 'office',
        'avatar' => 'avatar',
        'language' => 'language',
        'isPrimary' => 'isPrimary',
        'status' => 'status',
        'vmGreetingType' => 'vmGreetingType',
        'vmTimeout' => 'vmTimeout',
        'vmFile' => 'vmFile',
        'vmPlaybackNumber' => 'vmPlaybackNumber',
        'pin' => 'pin',
        'number' => 'number',
        'region' => 'region',
        'callerIdNumber' => 'callerIdNumber',
        'adminPermission' => 'adminPermission',
        'billingPermission' => 'billingPermission',
        'phonePermission' => 'phonePermission',
        'agilePermission' => 'agilePermission',
        'jobServerPermission' => 'jobServerPermission',
        'mediaServerPermission' => 'mediaServerPermission',
        'mailServerPermission' => 'mailServerPermission',
        'superAdminPermission' => 'superAdminPermission',
        'timezone' => 'timezone',
        'vmTranscription' => 'vmTranscription',
        'communication' => 'communication'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'password' => 'setPassword',
        'sipPassword' => 'setSipPassword',
        'turnPassword' => 'setTurnPassword',
        'first' => 'setFirst',
        'last' => 'setLast',
        'mobilePhone' => 'setMobilePhone',
        'businessPhone' => 'setBusinessPhone',
        'extension' => 'setExtension',
        'customCallerId' => 'setCustomCallerId',
        'jobTitle' => 'setJobTitle',
        'department' => 'setDepartment',
        'office' => 'setOffice',
        'avatar' => 'setAvatar',
        'language' => 'setLanguage',
        'isPrimary' => 'setIsPrimary',
        'status' => 'setStatus',
        'vmGreetingType' => 'setVmGreetingType',
        'vmTimeout' => 'setVmTimeout',
        'vmFile' => 'setVmFile',
        'vmPlaybackNumber' => 'setVmPlaybackNumber',
        'pin' => 'setPin',
        'number' => 'setNumber',
        'region' => 'setRegion',
        'callerIdNumber' => 'setCallerIdNumber',
        'adminPermission' => 'setAdminPermission',
        'billingPermission' => 'setBillingPermission',
        'phonePermission' => 'setPhonePermission',
        'agilePermission' => 'setAgilePermission',
        'jobServerPermission' => 'setJobServerPermission',
        'mediaServerPermission' => 'setMediaServerPermission',
        'mailServerPermission' => 'setMailServerPermission',
        'superAdminPermission' => 'setSuperAdminPermission',
        'timezone' => 'setTimezone',
        'vmTranscription' => 'setVmTranscription',
        'communication' => 'setCommunication'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'password' => 'getPassword',
        'sipPassword' => 'getSipPassword',
        'turnPassword' => 'getTurnPassword',
        'first' => 'getFirst',
        'last' => 'getLast',
        'mobilePhone' => 'getMobilePhone',
        'businessPhone' => 'getBusinessPhone',
        'extension' => 'getExtension',
        'customCallerId' => 'getCustomCallerId',
        'jobTitle' => 'getJobTitle',
        'department' => 'getDepartment',
        'office' => 'getOffice',
        'avatar' => 'getAvatar',
        'language' => 'getLanguage',
        'isPrimary' => 'getIsPrimary',
        'status' => 'getStatus',
        'vmGreetingType' => 'getVmGreetingType',
        'vmTimeout' => 'getVmTimeout',
        'vmFile' => 'getVmFile',
        'vmPlaybackNumber' => 'getVmPlaybackNumber',
        'pin' => 'getPin',
        'number' => 'getNumber',
        'region' => 'getRegion',
        'callerIdNumber' => 'getCallerIdNumber',
        'adminPermission' => 'getAdminPermission',
        'billingPermission' => 'getBillingPermission',
        'phonePermission' => 'getPhonePermission',
        'agilePermission' => 'getAgilePermission',
        'jobServerPermission' => 'getJobServerPermission',
        'mediaServerPermission' => 'getMediaServerPermission',
        'mailServerPermission' => 'getMailServerPermission',
        'superAdminPermission' => 'getSuperAdminPermission',
        'timezone' => 'getTimezone',
        'vmTranscription' => 'getVmTranscription',
        'communication' => 'getCommunication'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LANGUAGE_FR = 'fr';
    public const LANGUAGE_EN = 'en';
    public const LANGUAGE_JA = 'ja';
    public const LANGUAGE_DE = 'de';
    public const LANGUAGE_ES = 'es';
    public const IS_PRIMARY_1 = 1;
    public const IS_PRIMARY_0 = 0;
    public const STATUS_ACTIVE = 'active';
    public const STATUS_DISABLED = 'disabled';
    public const STATUS_TERMINATED = 'terminated';
    public const VM_GREETING_TYPE__DEFAULT = 'default';
    public const VM_GREETING_TYPE_MP3 = 'mp3';
    public const VM_GREETING_TYPE_NUMBER = 'number';
    public const ADMIN_PERMISSION_R = 'r';
    public const ADMIN_PERMISSION_RW = 'rw';
    public const BILLING_PERMISSION_R = 'r';
    public const BILLING_PERMISSION_RW = 'rw';
    public const PHONE_PERMISSION_R = 'r';
    public const PHONE_PERMISSION_RW = 'rw';
    public const AGILE_PERMISSION_R = 'r';
    public const AGILE_PERMISSION_RW = 'rw';
    public const JOB_SERVER_PERMISSION_R = 'r';
    public const JOB_SERVER_PERMISSION_RW = 'rw';
    public const MEDIA_SERVER_PERMISSION_R = 'r';
    public const MEDIA_SERVER_PERMISSION_RW = 'rw';
    public const MAIL_SERVER_PERMISSION_R = 'r';
    public const MAIL_SERVER_PERMISSION_RW = 'rw';
    public const SUPER_ADMIN_PERMISSION_R = 'r';
    public const SUPER_ADMIN_PERMISSION_RW = 'rw';
    public const TIMEZONE_EUROPE_ANDORRA = 'Europe/Andorra';
    public const TIMEZONE_ASIA_DUBAI = 'Asia/Dubai';
    public const TIMEZONE_ASIA_KABUL = 'Asia/Kabul';
    public const TIMEZONE_EUROPE_TIRANE = 'Europe/Tirane';
    public const TIMEZONE_ASIA_YEREVAN = 'Asia/Yerevan';
    public const TIMEZONE_ANTARCTICA_CASEY = 'Antarctica/Casey';
    public const TIMEZONE_ANTARCTICA_DAVIS = 'Antarctica/Davis';
    public const TIMEZONE_ANTARCTICA_DUMONT_D_URVILLE = 'Antarctica/DumontDUrville';
    public const TIMEZONE_ANTARCTICA_MAWSON = 'Antarctica/Mawson';
    public const TIMEZONE_ANTARCTICA_PALMER = 'Antarctica/Palmer';
    public const TIMEZONE_ANTARCTICA_ROTHERA = 'Antarctica/Rothera';
    public const TIMEZONE_ANTARCTICA_SYOWA = 'Antarctica/Syowa';
    public const TIMEZONE_ANTARCTICA_TROLL = 'Antarctica/Troll';
    public const TIMEZONE_ANTARCTICA_VOSTOK = 'Antarctica/Vostok';
    public const TIMEZONE_AMERICA_ARGENTINA_BUENOS_AIRES = 'America/Argentina/Buenos_Aires';
    public const TIMEZONE_AMERICA_ARGENTINA_CORDOBA = 'America/Argentina/Cordoba';
    public const TIMEZONE_AMERICA_ARGENTINA_SALTA = 'America/Argentina/Salta';
    public const TIMEZONE_AMERICA_ARGENTINA_JUJUY = 'America/Argentina/Jujuy';
    public const TIMEZONE_AMERICA_ARGENTINA_TUCUMAN = 'America/Argentina/Tucuman';
    public const TIMEZONE_AMERICA_ARGENTINA_CATAMARCA = 'America/Argentina/Catamarca';
    public const TIMEZONE_AMERICA_ARGENTINA_LA_RIOJA = 'America/Argentina/La_Rioja';
    public const TIMEZONE_AMERICA_ARGENTINA_SAN_JUAN = 'America/Argentina/San_Juan';
    public const TIMEZONE_AMERICA_ARGENTINA_MENDOZA = 'America/Argentina/Mendoza';
    public const TIMEZONE_AMERICA_ARGENTINA_SAN_LUIS = 'America/Argentina/San_Luis';
    public const TIMEZONE_AMERICA_ARGENTINA_RIO_GALLEGOS = 'America/Argentina/Rio_Gallegos';
    public const TIMEZONE_AMERICA_ARGENTINA_USHUAIA = 'America/Argentina/Ushuaia';
    public const TIMEZONE_PACIFIC_PAGO_PAGO = 'Pacific/Pago_Pago';
    public const TIMEZONE_EUROPE_VIENNA = 'Europe/Vienna';
    public const TIMEZONE_AUSTRALIA_LORD_HOWE = 'Australia/Lord_Howe';
    public const TIMEZONE_ANTARCTICA_MACQUARIE = 'Antarctica/Macquarie';
    public const TIMEZONE_AUSTRALIA_HOBART = 'Australia/Hobart';
    public const TIMEZONE_AUSTRALIA_CURRIE = 'Australia/Currie';
    public const TIMEZONE_AUSTRALIA_MELBOURNE = 'Australia/Melbourne';
    public const TIMEZONE_AUSTRALIA_SYDNEY = 'Australia/Sydney';
    public const TIMEZONE_AUSTRALIA_BROKEN_HILL = 'Australia/Broken_Hill';
    public const TIMEZONE_AUSTRALIA_BRISBANE = 'Australia/Brisbane';
    public const TIMEZONE_AUSTRALIA_LINDEMAN = 'Australia/Lindeman';
    public const TIMEZONE_AUSTRALIA_ADELAIDE = 'Australia/Adelaide';
    public const TIMEZONE_AUSTRALIA_DARWIN = 'Australia/Darwin';
    public const TIMEZONE_AUSTRALIA_PERTH = 'Australia/Perth';
    public const TIMEZONE_AUSTRALIA_EUCLA = 'Australia/Eucla';
    public const TIMEZONE_ASIA_BAKU = 'Asia/Baku';
    public const TIMEZONE_AMERICA_BARBADOS = 'America/Barbados';
    public const TIMEZONE_ASIA_DHAKA = 'Asia/Dhaka';
    public const TIMEZONE_EUROPE_BRUSSELS = 'Europe/Brussels';
    public const TIMEZONE_EUROPE_SOFIA = 'Europe/Sofia';
    public const TIMEZONE_ATLANTIC_BERMUDA = 'Atlantic/Bermuda';
    public const TIMEZONE_ASIA_BRUNEI = 'Asia/Brunei';
    public const TIMEZONE_AMERICA_LA_PAZ = 'America/La_Paz';
    public const TIMEZONE_AMERICA_NORONHA = 'America/Noronha';
    public const TIMEZONE_AMERICA_BELEM = 'America/Belem';
    public const TIMEZONE_AMERICA_FORTALEZA = 'America/Fortaleza';
    public const TIMEZONE_AMERICA_RECIFE = 'America/Recife';
    public const TIMEZONE_AMERICA_ARAGUAINA = 'America/Araguaina';
    public const TIMEZONE_AMERICA_MACEIO = 'America/Maceio';
    public const TIMEZONE_AMERICA_BAHIA = 'America/Bahia';
    public const TIMEZONE_AMERICA_SAO_PAULO = 'America/Sao_Paulo';
    public const TIMEZONE_AMERICA_CAMPO_GRANDE = 'America/Campo_Grande';
    public const TIMEZONE_AMERICA_CUIABA = 'America/Cuiaba';
    public const TIMEZONE_AMERICA_SANTAREM = 'America/Santarem';
    public const TIMEZONE_AMERICA_PORTO_VELHO = 'America/Porto_Velho';
    public const TIMEZONE_AMERICA_BOA_VISTA = 'America/Boa_Vista';
    public const TIMEZONE_AMERICA_MANAUS = 'America/Manaus';
    public const TIMEZONE_AMERICA_EIRUNEPE = 'America/Eirunepe';
    public const TIMEZONE_AMERICA_RIO_BRANCO = 'America/Rio_Branco';
    public const TIMEZONE_AMERICA_NASSAU = 'America/Nassau';
    public const TIMEZONE_ASIA_THIMPHU = 'Asia/Thimphu';
    public const TIMEZONE_EUROPE_MINSK = 'Europe/Minsk';
    public const TIMEZONE_AMERICA_BELIZE = 'America/Belize';
    public const TIMEZONE_AMERICA_ST_JOHNS = 'America/St_Johns';
    public const TIMEZONE_AMERICA_HALIFAX = 'America/Halifax';
    public const TIMEZONE_AMERICA_GLACE_BAY = 'America/Glace_Bay';
    public const TIMEZONE_AMERICA_MONCTON = 'America/Moncton';
    public const TIMEZONE_AMERICA_GOOSE_BAY = 'America/Goose_Bay';
    public const TIMEZONE_AMERICA_BLANC_SABLON = 'America/Blanc-Sablon';
    public const TIMEZONE_AMERICA_TORONTO = 'America/Toronto';
    public const TIMEZONE_AMERICA_NIPIGON = 'America/Nipigon';
    public const TIMEZONE_AMERICA_THUNDER_BAY = 'America/Thunder_Bay';
    public const TIMEZONE_AMERICA_IQALUIT = 'America/Iqaluit';
    public const TIMEZONE_AMERICA_PANGNIRTUNG = 'America/Pangnirtung';
    public const TIMEZONE_AMERICA_ATIKOKAN = 'America/Atikokan';
    public const TIMEZONE_AMERICA_WINNIPEG = 'America/Winnipeg';
    public const TIMEZONE_AMERICA_RAINY_RIVER = 'America/Rainy_River';
    public const TIMEZONE_AMERICA_RESOLUTE = 'America/Resolute';
    public const TIMEZONE_AMERICA_RANKIN_INLET = 'America/Rankin_Inlet';
    public const TIMEZONE_AMERICA_REGINA = 'America/Regina';
    public const TIMEZONE_AMERICA_SWIFT_CURRENT = 'America/Swift_Current';
    public const TIMEZONE_AMERICA_EDMONTON = 'America/Edmonton';
    public const TIMEZONE_AMERICA_CAMBRIDGE_BAY = 'America/Cambridge_Bay';
    public const TIMEZONE_AMERICA_YELLOWKNIFE = 'America/Yellowknife';
    public const TIMEZONE_AMERICA_INUVIK = 'America/Inuvik';
    public const TIMEZONE_AMERICA_CRESTON = 'America/Creston';
    public const TIMEZONE_AMERICA_DAWSON_CREEK = 'America/Dawson_Creek';
    public const TIMEZONE_AMERICA_FORT_NELSON = 'America/Fort_Nelson';
    public const TIMEZONE_AMERICA_VANCOUVER = 'America/Vancouver';
    public const TIMEZONE_AMERICA_WHITEHORSE = 'America/Whitehorse';
    public const TIMEZONE_AMERICA_DAWSON = 'America/Dawson';
    public const TIMEZONE_INDIAN_COCOS = 'Indian/Cocos';
    public const TIMEZONE_EUROPE_ZURICH = 'Europe/Zurich';
    public const TIMEZONE_AFRICA_ABIDJAN = 'Africa/Abidjan';
    public const TIMEZONE_PACIFIC_RAROTONGA = 'Pacific/Rarotonga';
    public const TIMEZONE_AMERICA_SANTIAGO = 'America/Santiago';
    public const TIMEZONE_AMERICA_PUNTA_ARENAS = 'America/Punta_Arenas';
    public const TIMEZONE_PACIFIC_EASTER = 'Pacific/Easter';
    public const TIMEZONE_ASIA_SHANGHAI = 'Asia/Shanghai';
    public const TIMEZONE_ASIA_URUMQI = 'Asia/Urumqi';
    public const TIMEZONE_AMERICA_BOGOTA = 'America/Bogota';
    public const TIMEZONE_AMERICA_COSTA_RICA = 'America/Costa_Rica';
    public const TIMEZONE_AMERICA_HAVANA = 'America/Havana';
    public const TIMEZONE_ATLANTIC_CAPE_VERDE = 'Atlantic/Cape_Verde';
    public const TIMEZONE_AMERICA_CURACAO = 'America/Curacao';
    public const TIMEZONE_INDIAN_CHRISTMAS = 'Indian/Christmas';
    public const TIMEZONE_ASIA_NICOSIA = 'Asia/Nicosia';
    public const TIMEZONE_ASIA_FAMAGUSTA = 'Asia/Famagusta';
    public const TIMEZONE_EUROPE_PRAGUE = 'Europe/Prague';
    public const TIMEZONE_EUROPE_BERLIN = 'Europe/Berlin';
    public const TIMEZONE_EUROPE_COPENHAGEN = 'Europe/Copenhagen';
    public const TIMEZONE_AMERICA_SANTO_DOMINGO = 'America/Santo_Domingo';
    public const TIMEZONE_AFRICA_ALGIERS = 'Africa/Algiers';
    public const TIMEZONE_AMERICA_GUAYAQUIL = 'America/Guayaquil';
    public const TIMEZONE_PACIFIC_GALAPAGOS = 'Pacific/Galapagos';
    public const TIMEZONE_EUROPE_TALLINN = 'Europe/Tallinn';
    public const TIMEZONE_AFRICA_CAIRO = 'Africa/Cairo';
    public const TIMEZONE_AFRICA_EL_AAIUN = 'Africa/El_Aaiun';
    public const TIMEZONE_EUROPE_MADRID = 'Europe/Madrid';
    public const TIMEZONE_AFRICA_CEUTA = 'Africa/Ceuta';
    public const TIMEZONE_ATLANTIC_CANARY = 'Atlantic/Canary';
    public const TIMEZONE_EUROPE_HELSINKI = 'Europe/Helsinki';
    public const TIMEZONE_PACIFIC_FIJI = 'Pacific/Fiji';
    public const TIMEZONE_ATLANTIC_STANLEY = 'Atlantic/Stanley';
    public const TIMEZONE_PACIFIC_CHUUK = 'Pacific/Chuuk';
    public const TIMEZONE_PACIFIC_POHNPEI = 'Pacific/Pohnpei';
    public const TIMEZONE_PACIFIC_KOSRAE = 'Pacific/Kosrae';
    public const TIMEZONE_ATLANTIC_FAROE = 'Atlantic/Faroe';
    public const TIMEZONE_EUROPE_PARIS = 'Europe/Paris';
    public const TIMEZONE_EUROPE_LONDON = 'Europe/London';
    public const TIMEZONE_ASIA_TBILISI = 'Asia/Tbilisi';
    public const TIMEZONE_AMERICA_CAYENNE = 'America/Cayenne';
    public const TIMEZONE_AFRICA_ACCRA = 'Africa/Accra';
    public const TIMEZONE_EUROPE_GIBRALTAR = 'Europe/Gibraltar';
    public const TIMEZONE_AMERICA_GODTHAB = 'America/Godthab';
    public const TIMEZONE_AMERICA_DANMARKSHAVN = 'America/Danmarkshavn';
    public const TIMEZONE_AMERICA_SCORESBYSUND = 'America/Scoresbysund';
    public const TIMEZONE_AMERICA_THULE = 'America/Thule';
    public const TIMEZONE_EUROPE_ATHENS = 'Europe/Athens';
    public const TIMEZONE_ATLANTIC_SOUTH_GEORGIA = 'Atlantic/South_Georgia';
    public const TIMEZONE_AMERICA_GUATEMALA = 'America/Guatemala';
    public const TIMEZONE_PACIFIC_GUAM = 'Pacific/Guam';
    public const TIMEZONE_AFRICA_BISSAU = 'Africa/Bissau';
    public const TIMEZONE_AMERICA_GUYANA = 'America/Guyana';
    public const TIMEZONE_ASIA_HONG_KONG = 'Asia/Hong_Kong';
    public const TIMEZONE_AMERICA_TEGUCIGALPA = 'America/Tegucigalpa';
    public const TIMEZONE_AMERICA_PORT_AU_PRINCE = 'America/Port-au-Prince';
    public const TIMEZONE_EUROPE_BUDAPEST = 'Europe/Budapest';
    public const TIMEZONE_ASIA_JAKARTA = 'Asia/Jakarta';
    public const TIMEZONE_ASIA_PONTIANAK = 'Asia/Pontianak';
    public const TIMEZONE_ASIA_MAKASSAR = 'Asia/Makassar';
    public const TIMEZONE_ASIA_JAYAPURA = 'Asia/Jayapura';
    public const TIMEZONE_EUROPE_DUBLIN = 'Europe/Dublin';
    public const TIMEZONE_ASIA_JERUSALEM = 'Asia/Jerusalem';
    public const TIMEZONE_ASIA_KOLKATA = 'Asia/Kolkata';
    public const TIMEZONE_INDIAN_CHAGOS = 'Indian/Chagos';
    public const TIMEZONE_ASIA_BAGHDAD = 'Asia/Baghdad';
    public const TIMEZONE_ASIA_TEHRAN = 'Asia/Tehran';
    public const TIMEZONE_ATLANTIC_REYKJAVIK = 'Atlantic/Reykjavik';
    public const TIMEZONE_EUROPE_ROME = 'Europe/Rome';
    public const TIMEZONE_AMERICA_JAMAICA = 'America/Jamaica';
    public const TIMEZONE_ASIA_AMMAN = 'Asia/Amman';
    public const TIMEZONE_ASIA_TOKYO = 'Asia/Tokyo';
    public const TIMEZONE_AFRICA_NAIROBI = 'Africa/Nairobi';
    public const TIMEZONE_ASIA_BISHKEK = 'Asia/Bishkek';
    public const TIMEZONE_PACIFIC_TARAWA = 'Pacific/Tarawa';
    public const TIMEZONE_PACIFIC_ENDERBURY = 'Pacific/Enderbury';
    public const TIMEZONE_PACIFIC_KIRITIMATI = 'Pacific/Kiritimati';
    public const TIMEZONE_ASIA_PYONGYANG = 'Asia/Pyongyang';
    public const TIMEZONE_ASIA_SEOUL = 'Asia/Seoul';
    public const TIMEZONE_ASIA_ALMATY = 'Asia/Almaty';
    public const TIMEZONE_ASIA_QYZYLORDA = 'Asia/Qyzylorda';
    public const TIMEZONE_ASIA_QOSTANAY = 'Asia/Qostanay';
    public const TIMEZONE_ASIA_AQTOBE = 'Asia/Aqtobe';
    public const TIMEZONE_ASIA_AQTAU = 'Asia/Aqtau';
    public const TIMEZONE_ASIA_ATYRAU = 'Asia/Atyrau';
    public const TIMEZONE_ASIA_ORAL = 'Asia/Oral';
    public const TIMEZONE_ASIA_BEIRUT = 'Asia/Beirut';
    public const TIMEZONE_ASIA_COLOMBO = 'Asia/Colombo';
    public const TIMEZONE_AFRICA_MONROVIA = 'Africa/Monrovia';
    public const TIMEZONE_EUROPE_VILNIUS = 'Europe/Vilnius';
    public const TIMEZONE_EUROPE_LUXEMBOURG = 'Europe/Luxembourg';
    public const TIMEZONE_EUROPE_RIGA = 'Europe/Riga';
    public const TIMEZONE_AFRICA_TRIPOLI = 'Africa/Tripoli';
    public const TIMEZONE_AFRICA_CASABLANCA = 'Africa/Casablanca';
    public const TIMEZONE_EUROPE_MONACO = 'Europe/Monaco';
    public const TIMEZONE_EUROPE_CHISINAU = 'Europe/Chisinau';
    public const TIMEZONE_PACIFIC_MAJURO = 'Pacific/Majuro';
    public const TIMEZONE_PACIFIC_KWAJALEIN = 'Pacific/Kwajalein';
    public const TIMEZONE_ASIA_YANGON = 'Asia/Yangon';
    public const TIMEZONE_ASIA_ULAANBAATAR = 'Asia/Ulaanbaatar';
    public const TIMEZONE_ASIA_HOVD = 'Asia/Hovd';
    public const TIMEZONE_ASIA_CHOIBALSAN = 'Asia/Choibalsan';
    public const TIMEZONE_ASIA_MACAU = 'Asia/Macau';
    public const TIMEZONE_AMERICA_MARTINIQUE = 'America/Martinique';
    public const TIMEZONE_EUROPE_MALTA = 'Europe/Malta';
    public const TIMEZONE_INDIAN_MAURITIUS = 'Indian/Mauritius';
    public const TIMEZONE_INDIAN_MALDIVES = 'Indian/Maldives';
    public const TIMEZONE_AMERICA_MEXICO_CITY = 'America/Mexico_City';
    public const TIMEZONE_AMERICA_CANCUN = 'America/Cancun';
    public const TIMEZONE_AMERICA_MERIDA = 'America/Merida';
    public const TIMEZONE_AMERICA_MONTERREY = 'America/Monterrey';
    public const TIMEZONE_AMERICA_MATAMOROS = 'America/Matamoros';
    public const TIMEZONE_AMERICA_MAZATLAN = 'America/Mazatlan';
    public const TIMEZONE_AMERICA_CHIHUAHUA = 'America/Chihuahua';
    public const TIMEZONE_AMERICA_OJINAGA = 'America/Ojinaga';
    public const TIMEZONE_AMERICA_HERMOSILLO = 'America/Hermosillo';
    public const TIMEZONE_AMERICA_TIJUANA = 'America/Tijuana';
    public const TIMEZONE_AMERICA_BAHIA_BANDERAS = 'America/Bahia_Banderas';
    public const TIMEZONE_ASIA_KUALA_LUMPUR = 'Asia/Kuala_Lumpur';
    public const TIMEZONE_ASIA_KUCHING = 'Asia/Kuching';
    public const TIMEZONE_AFRICA_MAPUTO = 'Africa/Maputo';
    public const TIMEZONE_AFRICA_WINDHOEK = 'Africa/Windhoek';
    public const TIMEZONE_PACIFIC_NOUMEA = 'Pacific/Noumea';
    public const TIMEZONE_PACIFIC_NORFOLK = 'Pacific/Norfolk';
    public const TIMEZONE_AFRICA_LAGOS = 'Africa/Lagos';
    public const TIMEZONE_AMERICA_MANAGUA = 'America/Managua';
    public const TIMEZONE_EUROPE_AMSTERDAM = 'Europe/Amsterdam';
    public const TIMEZONE_EUROPE_OSLO = 'Europe/Oslo';
    public const TIMEZONE_ASIA_KATHMANDU = 'Asia/Kathmandu';
    public const TIMEZONE_PACIFIC_NAURU = 'Pacific/Nauru';
    public const TIMEZONE_PACIFIC_NIUE = 'Pacific/Niue';
    public const TIMEZONE_PACIFIC_AUCKLAND = 'Pacific/Auckland';
    public const TIMEZONE_PACIFIC_CHATHAM = 'Pacific/Chatham';
    public const TIMEZONE_AMERICA_PANAMA = 'America/Panama';
    public const TIMEZONE_AMERICA_LIMA = 'America/Lima';
    public const TIMEZONE_PACIFIC_TAHITI = 'Pacific/Tahiti';
    public const TIMEZONE_PACIFIC_MARQUESAS = 'Pacific/Marquesas';
    public const TIMEZONE_PACIFIC_GAMBIER = 'Pacific/Gambier';
    public const TIMEZONE_PACIFIC_PORT_MORESBY = 'Pacific/Port_Moresby';
    public const TIMEZONE_PACIFIC_BOUGAINVILLE = 'Pacific/Bougainville';
    public const TIMEZONE_ASIA_MANILA = 'Asia/Manila';
    public const TIMEZONE_ASIA_KARACHI = 'Asia/Karachi';
    public const TIMEZONE_EUROPE_WARSAW = 'Europe/Warsaw';
    public const TIMEZONE_AMERICA_MIQUELON = 'America/Miquelon';
    public const TIMEZONE_PACIFIC_PITCAIRN = 'Pacific/Pitcairn';
    public const TIMEZONE_AMERICA_PUERTO_RICO = 'America/Puerto_Rico';
    public const TIMEZONE_ASIA_GAZA = 'Asia/Gaza';
    public const TIMEZONE_ASIA_HEBRON = 'Asia/Hebron';
    public const TIMEZONE_EUROPE_LISBON = 'Europe/Lisbon';
    public const TIMEZONE_ATLANTIC_MADEIRA = 'Atlantic/Madeira';
    public const TIMEZONE_ATLANTIC_AZORES = 'Atlantic/Azores';
    public const TIMEZONE_PACIFIC_PALAU = 'Pacific/Palau';
    public const TIMEZONE_AMERICA_ASUNCION = 'America/Asuncion';
    public const TIMEZONE_ASIA_QATAR = 'Asia/Qatar';
    public const TIMEZONE_INDIAN_REUNION = 'Indian/Reunion';
    public const TIMEZONE_EUROPE_BUCHAREST = 'Europe/Bucharest';
    public const TIMEZONE_EUROPE_BELGRADE = 'Europe/Belgrade';
    public const TIMEZONE_EUROPE_KALININGRAD = 'Europe/Kaliningrad';
    public const TIMEZONE_EUROPE_MOSCOW = 'Europe/Moscow';
    public const TIMEZONE_EUROPE_SIMFEROPOL = 'Europe/Simferopol';
    public const TIMEZONE_EUROPE_KIROV = 'Europe/Kirov';
    public const TIMEZONE_EUROPE_ASTRAKHAN = 'Europe/Astrakhan';
    public const TIMEZONE_EUROPE_VOLGOGRAD = 'Europe/Volgograd';
    public const TIMEZONE_EUROPE_SARATOV = 'Europe/Saratov';
    public const TIMEZONE_EUROPE_ULYANOVSK = 'Europe/Ulyanovsk';
    public const TIMEZONE_EUROPE_SAMARA = 'Europe/Samara';
    public const TIMEZONE_ASIA_YEKATERINBURG = 'Asia/Yekaterinburg';
    public const TIMEZONE_ASIA_OMSK = 'Asia/Omsk';
    public const TIMEZONE_ASIA_NOVOSIBIRSK = 'Asia/Novosibirsk';
    public const TIMEZONE_ASIA_BARNAUL = 'Asia/Barnaul';
    public const TIMEZONE_ASIA_TOMSK = 'Asia/Tomsk';
    public const TIMEZONE_ASIA_NOVOKUZNETSK = 'Asia/Novokuznetsk';
    public const TIMEZONE_ASIA_KRASNOYARSK = 'Asia/Krasnoyarsk';
    public const TIMEZONE_ASIA_IRKUTSK = 'Asia/Irkutsk';
    public const TIMEZONE_ASIA_CHITA = 'Asia/Chita';
    public const TIMEZONE_ASIA_YAKUTSK = 'Asia/Yakutsk';
    public const TIMEZONE_ASIA_KHANDYGA = 'Asia/Khandyga';
    public const TIMEZONE_ASIA_VLADIVOSTOK = 'Asia/Vladivostok';
    public const TIMEZONE_ASIA_UST_NERA = 'Asia/Ust-Nera';
    public const TIMEZONE_ASIA_MAGADAN = 'Asia/Magadan';
    public const TIMEZONE_ASIA_SAKHALIN = 'Asia/Sakhalin';
    public const TIMEZONE_ASIA_SREDNEKOLYMSK = 'Asia/Srednekolymsk';
    public const TIMEZONE_ASIA_KAMCHATKA = 'Asia/Kamchatka';
    public const TIMEZONE_ASIA_ANADYR = 'Asia/Anadyr';
    public const TIMEZONE_ASIA_RIYADH = 'Asia/Riyadh';
    public const TIMEZONE_PACIFIC_GUADALCANAL = 'Pacific/Guadalcanal';
    public const TIMEZONE_INDIAN_MAHE = 'Indian/Mahe';
    public const TIMEZONE_AFRICA_KHARTOUM = 'Africa/Khartoum';
    public const TIMEZONE_EUROPE_STOCKHOLM = 'Europe/Stockholm';
    public const TIMEZONE_ASIA_SINGAPORE = 'Asia/Singapore';
    public const TIMEZONE_AMERICA_PARAMARIBO = 'America/Paramaribo';
    public const TIMEZONE_AFRICA_JUBA = 'Africa/Juba';
    public const TIMEZONE_AFRICA_SAO_TOME = 'Africa/Sao_Tome';
    public const TIMEZONE_AMERICA_EL_SALVADOR = 'America/El_Salvador';
    public const TIMEZONE_ASIA_DAMASCUS = 'Asia/Damascus';
    public const TIMEZONE_AMERICA_GRAND_TURK = 'America/Grand_Turk';
    public const TIMEZONE_AFRICA_NDJAMENA = 'Africa/Ndjamena';
    public const TIMEZONE_INDIAN_KERGUELEN = 'Indian/Kerguelen';
    public const TIMEZONE_ASIA_BANGKOK = 'Asia/Bangkok';
    public const TIMEZONE_ASIA_DUSHANBE = 'Asia/Dushanbe';
    public const TIMEZONE_PACIFIC_FAKAOFO = 'Pacific/Fakaofo';
    public const TIMEZONE_ASIA_DILI = 'Asia/Dili';
    public const TIMEZONE_ASIA_ASHGABAT = 'Asia/Ashgabat';
    public const TIMEZONE_AFRICA_TUNIS = 'Africa/Tunis';
    public const TIMEZONE_PACIFIC_TONGATAPU = 'Pacific/Tongatapu';
    public const TIMEZONE_EUROPE_ISTANBUL = 'Europe/Istanbul';
    public const TIMEZONE_AMERICA_PORT_OF_SPAIN = 'America/Port_of_Spain';
    public const TIMEZONE_PACIFIC_FUNAFUTI = 'Pacific/Funafuti';
    public const TIMEZONE_ASIA_TAIPEI = 'Asia/Taipei';
    public const TIMEZONE_EUROPE_KIEV = 'Europe/Kiev';
    public const TIMEZONE_EUROPE_UZHGOROD = 'Europe/Uzhgorod';
    public const TIMEZONE_EUROPE_ZAPOROZHYE = 'Europe/Zaporozhye';
    public const TIMEZONE_PACIFIC_WAKE = 'Pacific/Wake';
    public const TIMEZONE_AMERICA_NEW_YORK = 'America/New_York';
    public const TIMEZONE_AMERICA_DETROIT = 'America/Detroit';
    public const TIMEZONE_AMERICA_KENTUCKY_LOUISVILLE = 'America/Kentucky/Louisville';
    public const TIMEZONE_AMERICA_KENTUCKY_MONTICELLO = 'America/Kentucky/Monticello';
    public const TIMEZONE_AMERICA_INDIANA_INDIANAPOLIS = 'America/Indiana/Indianapolis';
    public const TIMEZONE_AMERICA_INDIANA_VINCENNES = 'America/Indiana/Vincennes';
    public const TIMEZONE_AMERICA_INDIANA_WINAMAC = 'America/Indiana/Winamac';
    public const TIMEZONE_AMERICA_INDIANA_MARENGO = 'America/Indiana/Marengo';
    public const TIMEZONE_AMERICA_INDIANA_PETERSBURG = 'America/Indiana/Petersburg';
    public const TIMEZONE_AMERICA_INDIANA_VEVAY = 'America/Indiana/Vevay';
    public const TIMEZONE_AMERICA_CHICAGO = 'America/Chicago';
    public const TIMEZONE_AMERICA_INDIANA_TELL_CITY = 'America/Indiana/Tell_City';
    public const TIMEZONE_AMERICA_INDIANA_KNOX = 'America/Indiana/Knox';
    public const TIMEZONE_AMERICA_MENOMINEE = 'America/Menominee';
    public const TIMEZONE_AMERICA_NORTH_DAKOTA_CENTER = 'America/North_Dakota/Center';
    public const TIMEZONE_AMERICA_NORTH_DAKOTA_NEW_SALEM = 'America/North_Dakota/New_Salem';
    public const TIMEZONE_AMERICA_NORTH_DAKOTA_BEULAH = 'America/North_Dakota/Beulah';
    public const TIMEZONE_AMERICA_DENVER = 'America/Denver';
    public const TIMEZONE_AMERICA_BOISE = 'America/Boise';
    public const TIMEZONE_AMERICA_PHOENIX = 'America/Phoenix';
    public const TIMEZONE_AMERICA_LOS_ANGELES = 'America/Los_Angeles';
    public const TIMEZONE_AMERICA_ANCHORAGE = 'America/Anchorage';
    public const TIMEZONE_AMERICA_JUNEAU = 'America/Juneau';
    public const TIMEZONE_AMERICA_SITKA = 'America/Sitka';
    public const TIMEZONE_AMERICA_METLAKATLA = 'America/Metlakatla';
    public const TIMEZONE_AMERICA_YAKUTAT = 'America/Yakutat';
    public const TIMEZONE_AMERICA_NOME = 'America/Nome';
    public const TIMEZONE_AMERICA_ADAK = 'America/Adak';
    public const TIMEZONE_PACIFIC_HONOLULU = 'Pacific/Honolulu';
    public const TIMEZONE_AMERICA_MONTEVIDEO = 'America/Montevideo';
    public const TIMEZONE_ASIA_SAMARKAND = 'Asia/Samarkand';
    public const TIMEZONE_ASIA_TASHKENT = 'Asia/Tashkent';
    public const TIMEZONE_AMERICA_CARACAS = 'America/Caracas';
    public const TIMEZONE_ASIA_HO_CHI_MINH = 'Asia/Ho_Chi_Minh';
    public const TIMEZONE_PACIFIC_EFATE = 'Pacific/Efate';
    public const TIMEZONE_PACIFIC_WALLIS = 'Pacific/Wallis';
    public const TIMEZONE_PACIFIC_APIA = 'Pacific/Apia';
    public const TIMEZONE_AFRICA_JOHANNESBURG = 'Africa/Johannesburg';
    public const VM_TRANSCRIPTION_1 = 1;
    public const VM_TRANSCRIPTION_0 = 0;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_FR,
            self::LANGUAGE_EN,
            self::LANGUAGE_JA,
            self::LANGUAGE_DE,
            self::LANGUAGE_ES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsPrimaryAllowableValues()
    {
        return [
            self::IS_PRIMARY_1,
            self::IS_PRIMARY_0,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_DISABLED,
            self::STATUS_TERMINATED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVmGreetingTypeAllowableValues()
    {
        return [
            self::VM_GREETING_TYPE__DEFAULT,
            self::VM_GREETING_TYPE_MP3,
            self::VM_GREETING_TYPE_NUMBER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdminPermissionAllowableValues()
    {
        return [
            self::ADMIN_PERMISSION_R,
            self::ADMIN_PERMISSION_RW,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillingPermissionAllowableValues()
    {
        return [
            self::BILLING_PERMISSION_R,
            self::BILLING_PERMISSION_RW,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPhonePermissionAllowableValues()
    {
        return [
            self::PHONE_PERMISSION_R,
            self::PHONE_PERMISSION_RW,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAgilePermissionAllowableValues()
    {
        return [
            self::AGILE_PERMISSION_R,
            self::AGILE_PERMISSION_RW,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJobServerPermissionAllowableValues()
    {
        return [
            self::JOB_SERVER_PERMISSION_R,
            self::JOB_SERVER_PERMISSION_RW,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMediaServerPermissionAllowableValues()
    {
        return [
            self::MEDIA_SERVER_PERMISSION_R,
            self::MEDIA_SERVER_PERMISSION_RW,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMailServerPermissionAllowableValues()
    {
        return [
            self::MAIL_SERVER_PERMISSION_R,
            self::MAIL_SERVER_PERMISSION_RW,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSuperAdminPermissionAllowableValues()
    {
        return [
            self::SUPER_ADMIN_PERMISSION_R,
            self::SUPER_ADMIN_PERMISSION_RW,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimezoneAllowableValues()
    {
        return [
            self::TIMEZONE_EUROPE_ANDORRA,
            self::TIMEZONE_ASIA_DUBAI,
            self::TIMEZONE_ASIA_KABUL,
            self::TIMEZONE_EUROPE_TIRANE,
            self::TIMEZONE_ASIA_YEREVAN,
            self::TIMEZONE_ANTARCTICA_CASEY,
            self::TIMEZONE_ANTARCTICA_DAVIS,
            self::TIMEZONE_ANTARCTICA_DUMONT_D_URVILLE,
            self::TIMEZONE_ANTARCTICA_MAWSON,
            self::TIMEZONE_ANTARCTICA_PALMER,
            self::TIMEZONE_ANTARCTICA_ROTHERA,
            self::TIMEZONE_ANTARCTICA_SYOWA,
            self::TIMEZONE_ANTARCTICA_TROLL,
            self::TIMEZONE_ANTARCTICA_VOSTOK,
            self::TIMEZONE_AMERICA_ARGENTINA_BUENOS_AIRES,
            self::TIMEZONE_AMERICA_ARGENTINA_CORDOBA,
            self::TIMEZONE_AMERICA_ARGENTINA_SALTA,
            self::TIMEZONE_AMERICA_ARGENTINA_JUJUY,
            self::TIMEZONE_AMERICA_ARGENTINA_TUCUMAN,
            self::TIMEZONE_AMERICA_ARGENTINA_CATAMARCA,
            self::TIMEZONE_AMERICA_ARGENTINA_LA_RIOJA,
            self::TIMEZONE_AMERICA_ARGENTINA_SAN_JUAN,
            self::TIMEZONE_AMERICA_ARGENTINA_MENDOZA,
            self::TIMEZONE_AMERICA_ARGENTINA_SAN_LUIS,
            self::TIMEZONE_AMERICA_ARGENTINA_RIO_GALLEGOS,
            self::TIMEZONE_AMERICA_ARGENTINA_USHUAIA,
            self::TIMEZONE_PACIFIC_PAGO_PAGO,
            self::TIMEZONE_EUROPE_VIENNA,
            self::TIMEZONE_AUSTRALIA_LORD_HOWE,
            self::TIMEZONE_ANTARCTICA_MACQUARIE,
            self::TIMEZONE_AUSTRALIA_HOBART,
            self::TIMEZONE_AUSTRALIA_CURRIE,
            self::TIMEZONE_AUSTRALIA_MELBOURNE,
            self::TIMEZONE_AUSTRALIA_SYDNEY,
            self::TIMEZONE_AUSTRALIA_BROKEN_HILL,
            self::TIMEZONE_AUSTRALIA_BRISBANE,
            self::TIMEZONE_AUSTRALIA_LINDEMAN,
            self::TIMEZONE_AUSTRALIA_ADELAIDE,
            self::TIMEZONE_AUSTRALIA_DARWIN,
            self::TIMEZONE_AUSTRALIA_PERTH,
            self::TIMEZONE_AUSTRALIA_EUCLA,
            self::TIMEZONE_ASIA_BAKU,
            self::TIMEZONE_AMERICA_BARBADOS,
            self::TIMEZONE_ASIA_DHAKA,
            self::TIMEZONE_EUROPE_BRUSSELS,
            self::TIMEZONE_EUROPE_SOFIA,
            self::TIMEZONE_ATLANTIC_BERMUDA,
            self::TIMEZONE_ASIA_BRUNEI,
            self::TIMEZONE_AMERICA_LA_PAZ,
            self::TIMEZONE_AMERICA_NORONHA,
            self::TIMEZONE_AMERICA_BELEM,
            self::TIMEZONE_AMERICA_FORTALEZA,
            self::TIMEZONE_AMERICA_RECIFE,
            self::TIMEZONE_AMERICA_ARAGUAINA,
            self::TIMEZONE_AMERICA_MACEIO,
            self::TIMEZONE_AMERICA_BAHIA,
            self::TIMEZONE_AMERICA_SAO_PAULO,
            self::TIMEZONE_AMERICA_CAMPO_GRANDE,
            self::TIMEZONE_AMERICA_CUIABA,
            self::TIMEZONE_AMERICA_SANTAREM,
            self::TIMEZONE_AMERICA_PORTO_VELHO,
            self::TIMEZONE_AMERICA_BOA_VISTA,
            self::TIMEZONE_AMERICA_MANAUS,
            self::TIMEZONE_AMERICA_EIRUNEPE,
            self::TIMEZONE_AMERICA_RIO_BRANCO,
            self::TIMEZONE_AMERICA_NASSAU,
            self::TIMEZONE_ASIA_THIMPHU,
            self::TIMEZONE_EUROPE_MINSK,
            self::TIMEZONE_AMERICA_BELIZE,
            self::TIMEZONE_AMERICA_ST_JOHNS,
            self::TIMEZONE_AMERICA_HALIFAX,
            self::TIMEZONE_AMERICA_GLACE_BAY,
            self::TIMEZONE_AMERICA_MONCTON,
            self::TIMEZONE_AMERICA_GOOSE_BAY,
            self::TIMEZONE_AMERICA_BLANC_SABLON,
            self::TIMEZONE_AMERICA_TORONTO,
            self::TIMEZONE_AMERICA_NIPIGON,
            self::TIMEZONE_AMERICA_THUNDER_BAY,
            self::TIMEZONE_AMERICA_IQALUIT,
            self::TIMEZONE_AMERICA_PANGNIRTUNG,
            self::TIMEZONE_AMERICA_ATIKOKAN,
            self::TIMEZONE_AMERICA_WINNIPEG,
            self::TIMEZONE_AMERICA_RAINY_RIVER,
            self::TIMEZONE_AMERICA_RESOLUTE,
            self::TIMEZONE_AMERICA_RANKIN_INLET,
            self::TIMEZONE_AMERICA_REGINA,
            self::TIMEZONE_AMERICA_SWIFT_CURRENT,
            self::TIMEZONE_AMERICA_EDMONTON,
            self::TIMEZONE_AMERICA_CAMBRIDGE_BAY,
            self::TIMEZONE_AMERICA_YELLOWKNIFE,
            self::TIMEZONE_AMERICA_INUVIK,
            self::TIMEZONE_AMERICA_CRESTON,
            self::TIMEZONE_AMERICA_DAWSON_CREEK,
            self::TIMEZONE_AMERICA_FORT_NELSON,
            self::TIMEZONE_AMERICA_VANCOUVER,
            self::TIMEZONE_AMERICA_WHITEHORSE,
            self::TIMEZONE_AMERICA_DAWSON,
            self::TIMEZONE_INDIAN_COCOS,
            self::TIMEZONE_EUROPE_ZURICH,
            self::TIMEZONE_AFRICA_ABIDJAN,
            self::TIMEZONE_PACIFIC_RAROTONGA,
            self::TIMEZONE_AMERICA_SANTIAGO,
            self::TIMEZONE_AMERICA_PUNTA_ARENAS,
            self::TIMEZONE_PACIFIC_EASTER,
            self::TIMEZONE_ASIA_SHANGHAI,
            self::TIMEZONE_ASIA_URUMQI,
            self::TIMEZONE_AMERICA_BOGOTA,
            self::TIMEZONE_AMERICA_COSTA_RICA,
            self::TIMEZONE_AMERICA_HAVANA,
            self::TIMEZONE_ATLANTIC_CAPE_VERDE,
            self::TIMEZONE_AMERICA_CURACAO,
            self::TIMEZONE_INDIAN_CHRISTMAS,
            self::TIMEZONE_ASIA_NICOSIA,
            self::TIMEZONE_ASIA_FAMAGUSTA,
            self::TIMEZONE_EUROPE_PRAGUE,
            self::TIMEZONE_EUROPE_BERLIN,
            self::TIMEZONE_EUROPE_COPENHAGEN,
            self::TIMEZONE_AMERICA_SANTO_DOMINGO,
            self::TIMEZONE_AFRICA_ALGIERS,
            self::TIMEZONE_AMERICA_GUAYAQUIL,
            self::TIMEZONE_PACIFIC_GALAPAGOS,
            self::TIMEZONE_EUROPE_TALLINN,
            self::TIMEZONE_AFRICA_CAIRO,
            self::TIMEZONE_AFRICA_EL_AAIUN,
            self::TIMEZONE_EUROPE_MADRID,
            self::TIMEZONE_AFRICA_CEUTA,
            self::TIMEZONE_ATLANTIC_CANARY,
            self::TIMEZONE_EUROPE_HELSINKI,
            self::TIMEZONE_PACIFIC_FIJI,
            self::TIMEZONE_ATLANTIC_STANLEY,
            self::TIMEZONE_PACIFIC_CHUUK,
            self::TIMEZONE_PACIFIC_POHNPEI,
            self::TIMEZONE_PACIFIC_KOSRAE,
            self::TIMEZONE_ATLANTIC_FAROE,
            self::TIMEZONE_EUROPE_PARIS,
            self::TIMEZONE_EUROPE_LONDON,
            self::TIMEZONE_ASIA_TBILISI,
            self::TIMEZONE_AMERICA_CAYENNE,
            self::TIMEZONE_AFRICA_ACCRA,
            self::TIMEZONE_EUROPE_GIBRALTAR,
            self::TIMEZONE_AMERICA_GODTHAB,
            self::TIMEZONE_AMERICA_DANMARKSHAVN,
            self::TIMEZONE_AMERICA_SCORESBYSUND,
            self::TIMEZONE_AMERICA_THULE,
            self::TIMEZONE_EUROPE_ATHENS,
            self::TIMEZONE_ATLANTIC_SOUTH_GEORGIA,
            self::TIMEZONE_AMERICA_GUATEMALA,
            self::TIMEZONE_PACIFIC_GUAM,
            self::TIMEZONE_AFRICA_BISSAU,
            self::TIMEZONE_AMERICA_GUYANA,
            self::TIMEZONE_ASIA_HONG_KONG,
            self::TIMEZONE_AMERICA_TEGUCIGALPA,
            self::TIMEZONE_AMERICA_PORT_AU_PRINCE,
            self::TIMEZONE_EUROPE_BUDAPEST,
            self::TIMEZONE_ASIA_JAKARTA,
            self::TIMEZONE_ASIA_PONTIANAK,
            self::TIMEZONE_ASIA_MAKASSAR,
            self::TIMEZONE_ASIA_JAYAPURA,
            self::TIMEZONE_EUROPE_DUBLIN,
            self::TIMEZONE_ASIA_JERUSALEM,
            self::TIMEZONE_ASIA_KOLKATA,
            self::TIMEZONE_INDIAN_CHAGOS,
            self::TIMEZONE_ASIA_BAGHDAD,
            self::TIMEZONE_ASIA_TEHRAN,
            self::TIMEZONE_ATLANTIC_REYKJAVIK,
            self::TIMEZONE_EUROPE_ROME,
            self::TIMEZONE_AMERICA_JAMAICA,
            self::TIMEZONE_ASIA_AMMAN,
            self::TIMEZONE_ASIA_TOKYO,
            self::TIMEZONE_AFRICA_NAIROBI,
            self::TIMEZONE_ASIA_BISHKEK,
            self::TIMEZONE_PACIFIC_TARAWA,
            self::TIMEZONE_PACIFIC_ENDERBURY,
            self::TIMEZONE_PACIFIC_KIRITIMATI,
            self::TIMEZONE_ASIA_PYONGYANG,
            self::TIMEZONE_ASIA_SEOUL,
            self::TIMEZONE_ASIA_ALMATY,
            self::TIMEZONE_ASIA_QYZYLORDA,
            self::TIMEZONE_ASIA_QOSTANAY,
            self::TIMEZONE_ASIA_AQTOBE,
            self::TIMEZONE_ASIA_AQTAU,
            self::TIMEZONE_ASIA_ATYRAU,
            self::TIMEZONE_ASIA_ORAL,
            self::TIMEZONE_ASIA_BEIRUT,
            self::TIMEZONE_ASIA_COLOMBO,
            self::TIMEZONE_AFRICA_MONROVIA,
            self::TIMEZONE_EUROPE_VILNIUS,
            self::TIMEZONE_EUROPE_LUXEMBOURG,
            self::TIMEZONE_EUROPE_RIGA,
            self::TIMEZONE_AFRICA_TRIPOLI,
            self::TIMEZONE_AFRICA_CASABLANCA,
            self::TIMEZONE_EUROPE_MONACO,
            self::TIMEZONE_EUROPE_CHISINAU,
            self::TIMEZONE_PACIFIC_MAJURO,
            self::TIMEZONE_PACIFIC_KWAJALEIN,
            self::TIMEZONE_ASIA_YANGON,
            self::TIMEZONE_ASIA_ULAANBAATAR,
            self::TIMEZONE_ASIA_HOVD,
            self::TIMEZONE_ASIA_CHOIBALSAN,
            self::TIMEZONE_ASIA_MACAU,
            self::TIMEZONE_AMERICA_MARTINIQUE,
            self::TIMEZONE_EUROPE_MALTA,
            self::TIMEZONE_INDIAN_MAURITIUS,
            self::TIMEZONE_INDIAN_MALDIVES,
            self::TIMEZONE_AMERICA_MEXICO_CITY,
            self::TIMEZONE_AMERICA_CANCUN,
            self::TIMEZONE_AMERICA_MERIDA,
            self::TIMEZONE_AMERICA_MONTERREY,
            self::TIMEZONE_AMERICA_MATAMOROS,
            self::TIMEZONE_AMERICA_MAZATLAN,
            self::TIMEZONE_AMERICA_CHIHUAHUA,
            self::TIMEZONE_AMERICA_OJINAGA,
            self::TIMEZONE_AMERICA_HERMOSILLO,
            self::TIMEZONE_AMERICA_TIJUANA,
            self::TIMEZONE_AMERICA_BAHIA_BANDERAS,
            self::TIMEZONE_ASIA_KUALA_LUMPUR,
            self::TIMEZONE_ASIA_KUCHING,
            self::TIMEZONE_AFRICA_MAPUTO,
            self::TIMEZONE_AFRICA_WINDHOEK,
            self::TIMEZONE_PACIFIC_NOUMEA,
            self::TIMEZONE_PACIFIC_NORFOLK,
            self::TIMEZONE_AFRICA_LAGOS,
            self::TIMEZONE_AMERICA_MANAGUA,
            self::TIMEZONE_EUROPE_AMSTERDAM,
            self::TIMEZONE_EUROPE_OSLO,
            self::TIMEZONE_ASIA_KATHMANDU,
            self::TIMEZONE_PACIFIC_NAURU,
            self::TIMEZONE_PACIFIC_NIUE,
            self::TIMEZONE_PACIFIC_AUCKLAND,
            self::TIMEZONE_PACIFIC_CHATHAM,
            self::TIMEZONE_AMERICA_PANAMA,
            self::TIMEZONE_AMERICA_LIMA,
            self::TIMEZONE_PACIFIC_TAHITI,
            self::TIMEZONE_PACIFIC_MARQUESAS,
            self::TIMEZONE_PACIFIC_GAMBIER,
            self::TIMEZONE_PACIFIC_PORT_MORESBY,
            self::TIMEZONE_PACIFIC_BOUGAINVILLE,
            self::TIMEZONE_ASIA_MANILA,
            self::TIMEZONE_ASIA_KARACHI,
            self::TIMEZONE_EUROPE_WARSAW,
            self::TIMEZONE_AMERICA_MIQUELON,
            self::TIMEZONE_PACIFIC_PITCAIRN,
            self::TIMEZONE_AMERICA_PUERTO_RICO,
            self::TIMEZONE_ASIA_GAZA,
            self::TIMEZONE_ASIA_HEBRON,
            self::TIMEZONE_EUROPE_LISBON,
            self::TIMEZONE_ATLANTIC_MADEIRA,
            self::TIMEZONE_ATLANTIC_AZORES,
            self::TIMEZONE_PACIFIC_PALAU,
            self::TIMEZONE_AMERICA_ASUNCION,
            self::TIMEZONE_ASIA_QATAR,
            self::TIMEZONE_INDIAN_REUNION,
            self::TIMEZONE_EUROPE_BUCHAREST,
            self::TIMEZONE_EUROPE_BELGRADE,
            self::TIMEZONE_EUROPE_KALININGRAD,
            self::TIMEZONE_EUROPE_MOSCOW,
            self::TIMEZONE_EUROPE_SIMFEROPOL,
            self::TIMEZONE_EUROPE_KIROV,
            self::TIMEZONE_EUROPE_ASTRAKHAN,
            self::TIMEZONE_EUROPE_VOLGOGRAD,
            self::TIMEZONE_EUROPE_SARATOV,
            self::TIMEZONE_EUROPE_ULYANOVSK,
            self::TIMEZONE_EUROPE_SAMARA,
            self::TIMEZONE_ASIA_YEKATERINBURG,
            self::TIMEZONE_ASIA_OMSK,
            self::TIMEZONE_ASIA_NOVOSIBIRSK,
            self::TIMEZONE_ASIA_BARNAUL,
            self::TIMEZONE_ASIA_TOMSK,
            self::TIMEZONE_ASIA_NOVOKUZNETSK,
            self::TIMEZONE_ASIA_KRASNOYARSK,
            self::TIMEZONE_ASIA_IRKUTSK,
            self::TIMEZONE_ASIA_CHITA,
            self::TIMEZONE_ASIA_YAKUTSK,
            self::TIMEZONE_ASIA_KHANDYGA,
            self::TIMEZONE_ASIA_VLADIVOSTOK,
            self::TIMEZONE_ASIA_UST_NERA,
            self::TIMEZONE_ASIA_MAGADAN,
            self::TIMEZONE_ASIA_SAKHALIN,
            self::TIMEZONE_ASIA_SREDNEKOLYMSK,
            self::TIMEZONE_ASIA_KAMCHATKA,
            self::TIMEZONE_ASIA_ANADYR,
            self::TIMEZONE_ASIA_RIYADH,
            self::TIMEZONE_PACIFIC_GUADALCANAL,
            self::TIMEZONE_INDIAN_MAHE,
            self::TIMEZONE_AFRICA_KHARTOUM,
            self::TIMEZONE_EUROPE_STOCKHOLM,
            self::TIMEZONE_ASIA_SINGAPORE,
            self::TIMEZONE_AMERICA_PARAMARIBO,
            self::TIMEZONE_AFRICA_JUBA,
            self::TIMEZONE_AFRICA_SAO_TOME,
            self::TIMEZONE_AMERICA_EL_SALVADOR,
            self::TIMEZONE_ASIA_DAMASCUS,
            self::TIMEZONE_AMERICA_GRAND_TURK,
            self::TIMEZONE_AFRICA_NDJAMENA,
            self::TIMEZONE_INDIAN_KERGUELEN,
            self::TIMEZONE_ASIA_BANGKOK,
            self::TIMEZONE_ASIA_DUSHANBE,
            self::TIMEZONE_PACIFIC_FAKAOFO,
            self::TIMEZONE_ASIA_DILI,
            self::TIMEZONE_ASIA_ASHGABAT,
            self::TIMEZONE_AFRICA_TUNIS,
            self::TIMEZONE_PACIFIC_TONGATAPU,
            self::TIMEZONE_EUROPE_ISTANBUL,
            self::TIMEZONE_AMERICA_PORT_OF_SPAIN,
            self::TIMEZONE_PACIFIC_FUNAFUTI,
            self::TIMEZONE_ASIA_TAIPEI,
            self::TIMEZONE_EUROPE_KIEV,
            self::TIMEZONE_EUROPE_UZHGOROD,
            self::TIMEZONE_EUROPE_ZAPOROZHYE,
            self::TIMEZONE_PACIFIC_WAKE,
            self::TIMEZONE_AMERICA_NEW_YORK,
            self::TIMEZONE_AMERICA_DETROIT,
            self::TIMEZONE_AMERICA_KENTUCKY_LOUISVILLE,
            self::TIMEZONE_AMERICA_KENTUCKY_MONTICELLO,
            self::TIMEZONE_AMERICA_INDIANA_INDIANAPOLIS,
            self::TIMEZONE_AMERICA_INDIANA_VINCENNES,
            self::TIMEZONE_AMERICA_INDIANA_WINAMAC,
            self::TIMEZONE_AMERICA_INDIANA_MARENGO,
            self::TIMEZONE_AMERICA_INDIANA_PETERSBURG,
            self::TIMEZONE_AMERICA_INDIANA_VEVAY,
            self::TIMEZONE_AMERICA_CHICAGO,
            self::TIMEZONE_AMERICA_INDIANA_TELL_CITY,
            self::TIMEZONE_AMERICA_INDIANA_KNOX,
            self::TIMEZONE_AMERICA_MENOMINEE,
            self::TIMEZONE_AMERICA_NORTH_DAKOTA_CENTER,
            self::TIMEZONE_AMERICA_NORTH_DAKOTA_NEW_SALEM,
            self::TIMEZONE_AMERICA_NORTH_DAKOTA_BEULAH,
            self::TIMEZONE_AMERICA_DENVER,
            self::TIMEZONE_AMERICA_BOISE,
            self::TIMEZONE_AMERICA_PHOENIX,
            self::TIMEZONE_AMERICA_LOS_ANGELES,
            self::TIMEZONE_AMERICA_ANCHORAGE,
            self::TIMEZONE_AMERICA_JUNEAU,
            self::TIMEZONE_AMERICA_SITKA,
            self::TIMEZONE_AMERICA_METLAKATLA,
            self::TIMEZONE_AMERICA_YAKUTAT,
            self::TIMEZONE_AMERICA_NOME,
            self::TIMEZONE_AMERICA_ADAK,
            self::TIMEZONE_PACIFIC_HONOLULU,
            self::TIMEZONE_AMERICA_MONTEVIDEO,
            self::TIMEZONE_ASIA_SAMARKAND,
            self::TIMEZONE_ASIA_TASHKENT,
            self::TIMEZONE_AMERICA_CARACAS,
            self::TIMEZONE_ASIA_HO_CHI_MINH,
            self::TIMEZONE_PACIFIC_EFATE,
            self::TIMEZONE_PACIFIC_WALLIS,
            self::TIMEZONE_PACIFIC_APIA,
            self::TIMEZONE_AFRICA_JOHANNESBURG,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVmTranscriptionAllowableValues()
    {
        return [
            self::VM_TRANSCRIPTION_1,
            self::VM_TRANSCRIPTION_0,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('sipPassword', $data ?? [], null);
        $this->setIfExists('turnPassword', $data ?? [], null);
        $this->setIfExists('first', $data ?? [], null);
        $this->setIfExists('last', $data ?? [], null);
        $this->setIfExists('mobilePhone', $data ?? [], null);
        $this->setIfExists('businessPhone', $data ?? [], null);
        $this->setIfExists('extension', $data ?? [], null);
        $this->setIfExists('customCallerId', $data ?? [], null);
        $this->setIfExists('jobTitle', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('office', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], 'en');
        $this->setIfExists('isPrimary', $data ?? [], self::IS_PRIMARY_0);
        $this->setIfExists('status', $data ?? [], 'active');
        $this->setIfExists('vmGreetingType', $data ?? [], 'default');
        $this->setIfExists('vmTimeout', $data ?? [], 20);
        $this->setIfExists('vmFile', $data ?? [], null);
        $this->setIfExists('vmPlaybackNumber', $data ?? [], null);
        $this->setIfExists('pin', $data ?? [], 1234);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('callerIdNumber', $data ?? [], null);
        $this->setIfExists('adminPermission', $data ?? [], null);
        $this->setIfExists('billingPermission', $data ?? [], null);
        $this->setIfExists('phonePermission', $data ?? [], null);
        $this->setIfExists('agilePermission', $data ?? [], null);
        $this->setIfExists('jobServerPermission', $data ?? [], null);
        $this->setIfExists('mediaServerPermission', $data ?? [], null);
        $this->setIfExists('mailServerPermission', $data ?? [], null);
        $this->setIfExists('superAdminPermission', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], 'America/New_York');
        $this->setIfExists('vmTranscription', $data ?? [], self::VM_TRANSCRIPTION_0);
        $this->setIfExists('communication', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 255)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['email']) < 5)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 5.";
        }

        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ((mb_strlen($this->container['password']) > 255)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['password']) < 8)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 8.";
        }

        if ($this->container['sipPassword'] === null) {
            $invalidProperties[] = "'sipPassword' can't be null";
        }
        if ((mb_strlen($this->container['sipPassword']) > 45)) {
            $invalidProperties[] = "invalid value for 'sipPassword', the character length must be smaller than or equal to 45.";
        }

        if ((mb_strlen($this->container['sipPassword']) < 8)) {
            $invalidProperties[] = "invalid value for 'sipPassword', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['turnPassword']) && (mb_strlen($this->container['turnPassword']) > 45)) {
            $invalidProperties[] = "invalid value for 'turnPassword', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['turnPassword']) && (mb_strlen($this->container['turnPassword']) < 8)) {
            $invalidProperties[] = "invalid value for 'turnPassword', the character length must be bigger than or equal to 8.";
        }

        if ($this->container['first'] === null) {
            $invalidProperties[] = "'first' can't be null";
        }
        if ((mb_strlen($this->container['first']) > 45)) {
            $invalidProperties[] = "invalid value for 'first', the character length must be smaller than or equal to 45.";
        }

        if ($this->container['last'] === null) {
            $invalidProperties[] = "'last' can't be null";
        }
        if ((mb_strlen($this->container['last']) > 45)) {
            $invalidProperties[] = "invalid value for 'last', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['mobilePhone']) && (mb_strlen($this->container['mobilePhone']) > 20)) {
            $invalidProperties[] = "invalid value for 'mobilePhone', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['businessPhone']) && (mb_strlen($this->container['businessPhone']) > 20)) {
            $invalidProperties[] = "invalid value for 'businessPhone', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['businessPhone']) && (mb_strlen($this->container['businessPhone']) < 7)) {
            $invalidProperties[] = "invalid value for 'businessPhone', the character length must be bigger than or equal to 7.";
        }

        if (!is_null($this->container['jobTitle']) && (mb_strlen($this->container['jobTitle']) > 45)) {
            $invalidProperties[] = "invalid value for 'jobTitle', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['department']) && (mb_strlen($this->container['department']) > 45)) {
            $invalidProperties[] = "invalid value for 'department', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['avatar']) && (mb_strlen($this->container['avatar']) > 255)) {
            $invalidProperties[] = "invalid value for 'avatar', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($this->container['language']) && !in_array($this->container['language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'language', must be one of '%s'",
                $this->container['language'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['language']) && (mb_strlen($this->container['language']) > 5)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be smaller than or equal to 5.";
        }

        $allowedValues = $this->getIsPrimaryAllowableValues();
        if (!is_null($this->container['isPrimary']) && !in_array($this->container['isPrimary'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isPrimary', must be one of '%s'",
                $this->container['isPrimary'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVmGreetingTypeAllowableValues();
        if (!is_null($this->container['vmGreetingType']) && !in_array($this->container['vmGreetingType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vmGreetingType', must be one of '%s'",
                $this->container['vmGreetingType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['vmPlaybackNumber']) && (mb_strlen($this->container['vmPlaybackNumber']) > 20)) {
            $invalidProperties[] = "invalid value for 'vmPlaybackNumber', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['callerIdNumber']) && (mb_strlen($this->container['callerIdNumber']) > 20)) {
            $invalidProperties[] = "invalid value for 'callerIdNumber', the character length must be smaller than or equal to 20.";
        }

        $allowedValues = $this->getAdminPermissionAllowableValues();
        if (!is_null($this->container['adminPermission']) && !in_array($this->container['adminPermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'adminPermission', must be one of '%s'",
                $this->container['adminPermission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBillingPermissionAllowableValues();
        if (!is_null($this->container['billingPermission']) && !in_array($this->container['billingPermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'billingPermission', must be one of '%s'",
                $this->container['billingPermission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPhonePermissionAllowableValues();
        if (!is_null($this->container['phonePermission']) && !in_array($this->container['phonePermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'phonePermission', must be one of '%s'",
                $this->container['phonePermission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAgilePermissionAllowableValues();
        if (!is_null($this->container['agilePermission']) && !in_array($this->container['agilePermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'agilePermission', must be one of '%s'",
                $this->container['agilePermission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getJobServerPermissionAllowableValues();
        if (!is_null($this->container['jobServerPermission']) && !in_array($this->container['jobServerPermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'jobServerPermission', must be one of '%s'",
                $this->container['jobServerPermission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMediaServerPermissionAllowableValues();
        if (!is_null($this->container['mediaServerPermission']) && !in_array($this->container['mediaServerPermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mediaServerPermission', must be one of '%s'",
                $this->container['mediaServerPermission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMailServerPermissionAllowableValues();
        if (!is_null($this->container['mailServerPermission']) && !in_array($this->container['mailServerPermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mailServerPermission', must be one of '%s'",
                $this->container['mailServerPermission'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSuperAdminPermissionAllowableValues();
        if (!is_null($this->container['superAdminPermission']) && !in_array($this->container['superAdminPermission'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'superAdminPermission', must be one of '%s'",
                $this->container['superAdminPermission'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        $allowedValues = $this->getTimezoneAllowableValues();
        if (!is_null($this->container['timezone']) && !in_array($this->container['timezone'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'timezone', must be one of '%s'",
                $this->container['timezone'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['timezone']) > 45)) {
            $invalidProperties[] = "invalid value for 'timezone', the character length must be smaller than or equal to 45.";
        }

        $allowedValues = $this->getVmTranscriptionAllowableValues();
        if (!is_null($this->container['vmTranscription']) && !in_array($this->container['vmTranscription'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vmTranscription', must be one of '%s'",
                $this->container['vmTranscription'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Users., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($email) < 5)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Users., must be bigger than or equal to 5.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        if ((mb_strlen($password) > 255)) {
            throw new \InvalidArgumentException('invalid length for $password when calling Users., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($password) < 8)) {
            throw new \InvalidArgumentException('invalid length for $password when calling Users., must be bigger than or equal to 8.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets sipPassword
     *
     * @return string
     */
    public function getSipPassword()
    {
        return $this->container['sipPassword'];
    }

    /**
     * Sets sipPassword
     *
     * @param string $sipPassword sipPassword
     *
     * @return self
     */
    public function setSipPassword($sipPassword)
    {
        if (is_null($sipPassword)) {
            throw new \InvalidArgumentException('non-nullable sipPassword cannot be null');
        }
        if ((mb_strlen($sipPassword) > 45)) {
            throw new \InvalidArgumentException('invalid length for $sipPassword when calling Users., must be smaller than or equal to 45.');
        }
        if ((mb_strlen($sipPassword) < 8)) {
            throw new \InvalidArgumentException('invalid length for $sipPassword when calling Users., must be bigger than or equal to 8.');
        }

        $this->container['sipPassword'] = $sipPassword;

        return $this;
    }

    /**
     * Gets turnPassword
     *
     * @return string|null
     */
    public function getTurnPassword()
    {
        return $this->container['turnPassword'];
    }

    /**
     * Sets turnPassword
     *
     * @param string|null $turnPassword turnPassword
     *
     * @return self
     */
    public function setTurnPassword($turnPassword)
    {
        if (is_null($turnPassword)) {
            throw new \InvalidArgumentException('non-nullable turnPassword cannot be null');
        }
        if ((mb_strlen($turnPassword) > 45)) {
            throw new \InvalidArgumentException('invalid length for $turnPassword when calling Users., must be smaller than or equal to 45.');
        }
        if ((mb_strlen($turnPassword) < 8)) {
            throw new \InvalidArgumentException('invalid length for $turnPassword when calling Users., must be bigger than or equal to 8.');
        }

        $this->container['turnPassword'] = $turnPassword;

        return $this;
    }

    /**
     * Gets first
     *
     * @return string
     */
    public function getFirst()
    {
        return $this->container['first'];
    }

    /**
     * Sets first
     *
     * @param string $first first
     *
     * @return self
     */
    public function setFirst($first)
    {
        if (is_null($first)) {
            throw new \InvalidArgumentException('non-nullable first cannot be null');
        }
        if ((mb_strlen($first) > 45)) {
            throw new \InvalidArgumentException('invalid length for $first when calling Users., must be smaller than or equal to 45.');
        }

        $this->container['first'] = $first;

        return $this;
    }

    /**
     * Gets last
     *
     * @return string
     */
    public function getLast()
    {
        return $this->container['last'];
    }

    /**
     * Sets last
     *
     * @param string $last last
     *
     * @return self
     */
    public function setLast($last)
    {
        if (is_null($last)) {
            throw new \InvalidArgumentException('non-nullable last cannot be null');
        }
        if ((mb_strlen($last) > 45)) {
            throw new \InvalidArgumentException('invalid length for $last when calling Users., must be smaller than or equal to 45.');
        }

        $this->container['last'] = $last;

        return $this;
    }

    /**
     * Gets mobilePhone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobilePhone'];
    }

    /**
     * Sets mobilePhone
     *
     * @param string|null $mobilePhone mobilePhone
     *
     * @return self
     */
    public function setMobilePhone($mobilePhone)
    {
        if (is_null($mobilePhone)) {
            throw new \InvalidArgumentException('non-nullable mobilePhone cannot be null');
        }
        if ((mb_strlen($mobilePhone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $mobilePhone when calling Users., must be smaller than or equal to 20.');
        }

        $this->container['mobilePhone'] = $mobilePhone;

        return $this;
    }

    /**
     * Gets businessPhone
     *
     * @return string|null
     */
    public function getBusinessPhone()
    {
        return $this->container['businessPhone'];
    }

    /**
     * Sets businessPhone
     *
     * @param string|null $businessPhone businessPhone
     *
     * @return self
     */
    public function setBusinessPhone($businessPhone)
    {
        if (is_null($businessPhone)) {
            throw new \InvalidArgumentException('non-nullable businessPhone cannot be null');
        }
        if ((mb_strlen($businessPhone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $businessPhone when calling Users., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($businessPhone) < 7)) {
            throw new \InvalidArgumentException('invalid length for $businessPhone when calling Users., must be bigger than or equal to 7.');
        }

        $this->container['businessPhone'] = $businessPhone;

        return $this;
    }

    /**
     * Gets extension
     *
     * @return int|null
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     *
     * @param int|null $extension extension
     *
     * @return self
     */
    public function setExtension($extension)
    {
        if (is_null($extension)) {
            throw new \InvalidArgumentException('non-nullable extension cannot be null');
        }
        $this->container['extension'] = $extension;

        return $this;
    }

    /**
     * Gets customCallerId
     *
     * @return int|null
     */
    public function getCustomCallerId()
    {
        return $this->container['customCallerId'];
    }

    /**
     * Sets customCallerId
     *
     * @param int|null $customCallerId customCallerId
     *
     * @return self
     */
    public function setCustomCallerId($customCallerId)
    {
        if (is_null($customCallerId)) {
            throw new \InvalidArgumentException('non-nullable customCallerId cannot be null');
        }
        $this->container['customCallerId'] = $customCallerId;

        return $this;
    }

    /**
     * Gets jobTitle
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['jobTitle'];
    }

    /**
     * Sets jobTitle
     *
     * @param string|null $jobTitle jobTitle
     *
     * @return self
     */
    public function setJobTitle($jobTitle)
    {
        if (is_null($jobTitle)) {
            throw new \InvalidArgumentException('non-nullable jobTitle cannot be null');
        }
        if ((mb_strlen($jobTitle) > 45)) {
            throw new \InvalidArgumentException('invalid length for $jobTitle when calling Users., must be smaller than or equal to 45.');
        }

        $this->container['jobTitle'] = $jobTitle;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department department
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            throw new \InvalidArgumentException('non-nullable department cannot be null');
        }
        if ((mb_strlen($department) > 45)) {
            throw new \InvalidArgumentException('invalid length for $department when calling Users., must be smaller than or equal to 45.');
        }

        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets office
     *
     * @return string|null
     */
    public function getOffice()
    {
        return $this->container['office'];
    }

    /**
     * Sets office
     *
     * @param string|null $office ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setOffice($office)
    {
        if (is_null($office)) {
            throw new \InvalidArgumentException('non-nullable office cannot be null');
        }
        $this->container['office'] = $office;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string|null
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string|null $avatar avatar
     *
     * @return self
     */
    public function setAvatar($avatar)
    {
        if (is_null($avatar)) {
            throw new \InvalidArgumentException('non-nullable avatar cannot be null');
        }
        if ((mb_strlen($avatar) > 255)) {
            throw new \InvalidArgumentException('invalid length for $avatar when calling Users., must be smaller than or equal to 255.');
        }

        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $allowedValues = $this->getLanguageAllowableValues();
        if (!in_array($language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'language', must be one of '%s'",
                    $language,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($language) > 5)) {
            throw new \InvalidArgumentException('invalid length for $language when calling Users., must be smaller than or equal to 5.');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets isPrimary
     *
     * @return int|null
     */
    public function getIsPrimary()
    {
        return $this->container['isPrimary'];
    }

    /**
     * Sets isPrimary
     *
     * @param int|null $isPrimary isPrimary
     *
     * @return self
     */
    public function setIsPrimary($isPrimary)
    {
        if (is_null($isPrimary)) {
            throw new \InvalidArgumentException('non-nullable isPrimary cannot be null');
        }
        $allowedValues = $this->getIsPrimaryAllowableValues();
        if (!in_array($isPrimary, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isPrimary', must be one of '%s'",
                    $isPrimary,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['isPrimary'] = $isPrimary;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets vmGreetingType
     *
     * @return string|null
     */
    public function getVmGreetingType()
    {
        return $this->container['vmGreetingType'];
    }

    /**
     * Sets vmGreetingType
     *
     * @param string|null $vmGreetingType vmGreetingType
     *
     * @return self
     */
    public function setVmGreetingType($vmGreetingType)
    {
        if (is_null($vmGreetingType)) {
            throw new \InvalidArgumentException('non-nullable vmGreetingType cannot be null');
        }
        $allowedValues = $this->getVmGreetingTypeAllowableValues();
        if (!in_array($vmGreetingType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vmGreetingType', must be one of '%s'",
                    $vmGreetingType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vmGreetingType'] = $vmGreetingType;

        return $this;
    }

    /**
     * Gets vmTimeout
     *
     * @return int|null
     */
    public function getVmTimeout()
    {
        return $this->container['vmTimeout'];
    }

    /**
     * Sets vmTimeout
     *
     * @param int|null $vmTimeout vmTimeout
     *
     * @return self
     */
    public function setVmTimeout($vmTimeout)
    {
        if (is_null($vmTimeout)) {
            throw new \InvalidArgumentException('non-nullable vmTimeout cannot be null');
        }
        $this->container['vmTimeout'] = $vmTimeout;

        return $this;
    }

    /**
     * Gets vmFile
     *
     * @return string|null
     */
    public function getVmFile()
    {
        return $this->container['vmFile'];
    }

    /**
     * Sets vmFile
     *
     * @param string|null $vmFile ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setVmFile($vmFile)
    {
        if (is_null($vmFile)) {
            throw new \InvalidArgumentException('non-nullable vmFile cannot be null');
        }
        $this->container['vmFile'] = $vmFile;

        return $this;
    }

    /**
     * Gets vmPlaybackNumber
     *
     * @return string|null
     */
    public function getVmPlaybackNumber()
    {
        return $this->container['vmPlaybackNumber'];
    }

    /**
     * Sets vmPlaybackNumber
     *
     * @param string|null $vmPlaybackNumber vmPlaybackNumber
     *
     * @return self
     */
    public function setVmPlaybackNumber($vmPlaybackNumber)
    {
        if (is_null($vmPlaybackNumber)) {
            throw new \InvalidArgumentException('non-nullable vmPlaybackNumber cannot be null');
        }
        if ((mb_strlen($vmPlaybackNumber) > 20)) {
            throw new \InvalidArgumentException('invalid length for $vmPlaybackNumber when calling Users., must be smaller than or equal to 20.');
        }

        $this->container['vmPlaybackNumber'] = $vmPlaybackNumber;

        return $this;
    }

    /**
     * Gets pin
     *
     * @return int|null
     */
    public function getPin()
    {
        return $this->container['pin'];
    }

    /**
     * Sets pin
     *
     * @param int|null $pin pin
     *
     * @return self
     */
    public function setPin($pin)
    {
        if (is_null($pin)) {
            throw new \InvalidArgumentException('non-nullable pin cannot be null');
        }
        $this->container['pin'] = $pin;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region ObjectId (unique 12 bytes ID)
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets callerIdNumber
     *
     * @return string|null
     */
    public function getCallerIdNumber()
    {
        return $this->container['callerIdNumber'];
    }

    /**
     * Sets callerIdNumber
     *
     * @param string|null $callerIdNumber callerIdNumber
     *
     * @return self
     */
    public function setCallerIdNumber($callerIdNumber)
    {
        if (is_null($callerIdNumber)) {
            throw new \InvalidArgumentException('non-nullable callerIdNumber cannot be null');
        }
        if ((mb_strlen($callerIdNumber) > 20)) {
            throw new \InvalidArgumentException('invalid length for $callerIdNumber when calling Users., must be smaller than or equal to 20.');
        }

        $this->container['callerIdNumber'] = $callerIdNumber;

        return $this;
    }

    /**
     * Gets adminPermission
     *
     * @return string|null
     */
    public function getAdminPermission()
    {
        return $this->container['adminPermission'];
    }

    /**
     * Sets adminPermission
     *
     * @param string|null $adminPermission adminPermission
     *
     * @return self
     */
    public function setAdminPermission($adminPermission)
    {
        if (is_null($adminPermission)) {
            array_push($this->openAPINullablesSetToNull, 'adminPermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('adminPermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getAdminPermissionAllowableValues();
        if (!is_null($adminPermission) && !in_array($adminPermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'adminPermission', must be one of '%s'",
                    $adminPermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['adminPermission'] = $adminPermission;

        return $this;
    }

    /**
     * Gets billingPermission
     *
     * @return string|null
     */
    public function getBillingPermission()
    {
        return $this->container['billingPermission'];
    }

    /**
     * Sets billingPermission
     *
     * @param string|null $billingPermission billingPermission
     *
     * @return self
     */
    public function setBillingPermission($billingPermission)
    {
        if (is_null($billingPermission)) {
            array_push($this->openAPINullablesSetToNull, 'billingPermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billingPermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getBillingPermissionAllowableValues();
        if (!is_null($billingPermission) && !in_array($billingPermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'billingPermission', must be one of '%s'",
                    $billingPermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billingPermission'] = $billingPermission;

        return $this;
    }

    /**
     * Gets phonePermission
     *
     * @return string|null
     */
    public function getPhonePermission()
    {
        return $this->container['phonePermission'];
    }

    /**
     * Sets phonePermission
     *
     * @param string|null $phonePermission phonePermission
     *
     * @return self
     */
    public function setPhonePermission($phonePermission)
    {
        if (is_null($phonePermission)) {
            array_push($this->openAPINullablesSetToNull, 'phonePermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phonePermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPhonePermissionAllowableValues();
        if (!is_null($phonePermission) && !in_array($phonePermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'phonePermission', must be one of '%s'",
                    $phonePermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['phonePermission'] = $phonePermission;

        return $this;
    }

    /**
     * Gets agilePermission
     *
     * @return string|null
     */
    public function getAgilePermission()
    {
        return $this->container['agilePermission'];
    }

    /**
     * Sets agilePermission
     *
     * @param string|null $agilePermission agilePermission
     *
     * @return self
     */
    public function setAgilePermission($agilePermission)
    {
        if (is_null($agilePermission)) {
            array_push($this->openAPINullablesSetToNull, 'agilePermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('agilePermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getAgilePermissionAllowableValues();
        if (!is_null($agilePermission) && !in_array($agilePermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'agilePermission', must be one of '%s'",
                    $agilePermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['agilePermission'] = $agilePermission;

        return $this;
    }

    /**
     * Gets jobServerPermission
     *
     * @return string|null
     */
    public function getJobServerPermission()
    {
        return $this->container['jobServerPermission'];
    }

    /**
     * Sets jobServerPermission
     *
     * @param string|null $jobServerPermission jobServerPermission
     *
     * @return self
     */
    public function setJobServerPermission($jobServerPermission)
    {
        if (is_null($jobServerPermission)) {
            array_push($this->openAPINullablesSetToNull, 'jobServerPermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('jobServerPermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getJobServerPermissionAllowableValues();
        if (!is_null($jobServerPermission) && !in_array($jobServerPermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'jobServerPermission', must be one of '%s'",
                    $jobServerPermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['jobServerPermission'] = $jobServerPermission;

        return $this;
    }

    /**
     * Gets mediaServerPermission
     *
     * @return string|null
     */
    public function getMediaServerPermission()
    {
        return $this->container['mediaServerPermission'];
    }

    /**
     * Sets mediaServerPermission
     *
     * @param string|null $mediaServerPermission mediaServerPermission
     *
     * @return self
     */
    public function setMediaServerPermission($mediaServerPermission)
    {
        if (is_null($mediaServerPermission)) {
            array_push($this->openAPINullablesSetToNull, 'mediaServerPermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mediaServerPermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getMediaServerPermissionAllowableValues();
        if (!is_null($mediaServerPermission) && !in_array($mediaServerPermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mediaServerPermission', must be one of '%s'",
                    $mediaServerPermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mediaServerPermission'] = $mediaServerPermission;

        return $this;
    }

    /**
     * Gets mailServerPermission
     *
     * @return string|null
     */
    public function getMailServerPermission()
    {
        return $this->container['mailServerPermission'];
    }

    /**
     * Sets mailServerPermission
     *
     * @param string|null $mailServerPermission mailServerPermission
     *
     * @return self
     */
    public function setMailServerPermission($mailServerPermission)
    {
        if (is_null($mailServerPermission)) {
            array_push($this->openAPINullablesSetToNull, 'mailServerPermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mailServerPermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getMailServerPermissionAllowableValues();
        if (!is_null($mailServerPermission) && !in_array($mailServerPermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mailServerPermission', must be one of '%s'",
                    $mailServerPermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mailServerPermission'] = $mailServerPermission;

        return $this;
    }

    /**
     * Gets superAdminPermission
     *
     * @return string|null
     */
    public function getSuperAdminPermission()
    {
        return $this->container['superAdminPermission'];
    }

    /**
     * Sets superAdminPermission
     *
     * @param string|null $superAdminPermission superAdminPermission
     *
     * @return self
     */
    public function setSuperAdminPermission($superAdminPermission)
    {
        if (is_null($superAdminPermission)) {
            array_push($this->openAPINullablesSetToNull, 'superAdminPermission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('superAdminPermission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSuperAdminPermissionAllowableValues();
        if (!is_null($superAdminPermission) && !in_array($superAdminPermission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'superAdminPermission', must be one of '%s'",
                    $superAdminPermission,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['superAdminPermission'] = $superAdminPermission;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $allowedValues = $this->getTimezoneAllowableValues();
        if (!in_array($timezone, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'timezone', must be one of '%s'",
                    $timezone,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($timezone) > 45)) {
            throw new \InvalidArgumentException('invalid length for $timezone when calling Users., must be smaller than or equal to 45.');
        }

        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets vmTranscription
     *
     * @return int|null
     */
    public function getVmTranscription()
    {
        return $this->container['vmTranscription'];
    }

    /**
     * Sets vmTranscription
     *
     * @param int|null $vmTranscription vmTranscription
     *
     * @return self
     */
    public function setVmTranscription($vmTranscription)
    {
        if (is_null($vmTranscription)) {
            throw new \InvalidArgumentException('non-nullable vmTranscription cannot be null');
        }
        $allowedValues = $this->getVmTranscriptionAllowableValues();
        if (!in_array($vmTranscription, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vmTranscription', must be one of '%s'",
                    $vmTranscription,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vmTranscription'] = $vmTranscription;

        return $this;
    }

    /**
     * Gets communication
     *
     * @return object|null
     */
    public function getCommunication()
    {
        return $this->container['communication'];
    }

    /**
     * Sets communication
     *
     * @param object|null $communication communication
     *
     * @return self
     */
    public function setCommunication($communication)
    {
        if (is_null($communication)) {
            throw new \InvalidArgumentException('non-nullable communication cannot be null');
        }
        $this->container['communication'] = $communication;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


